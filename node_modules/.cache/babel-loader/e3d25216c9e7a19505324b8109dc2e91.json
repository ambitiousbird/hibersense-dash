{"ast":null,"code":"var _jsxFileName = \"/Users/langgao/Documents/HiberSense Dashboard/hibersense-dash/src/components/LineChart/ChartComponents.js\";\nimport * as d3 from \"d3\";\nimport React, { Component } from \"react\";\nexport const D3blackbox = d3render => {\n  return class Blackbox extends Component {\n    componentDidMount() {\n      d3render.call(this);\n    }\n\n    componentDidUpdate() {\n      d3render.call(this);\n    }\n\n    render() {\n      const transform = this.props.transform || \"\";\n      return React.createElement(\"g\", {\n        transform: transform,\n        ref: \"anchor\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 16\n        },\n        __self: this\n      });\n    }\n\n  };\n};\nexport const XAxis = D3blackbox(function () {\n  const axis = d3.axisBottom().tickFormat(d => d3.timeFormat(\"%H:%M %S\")(d)).scale(this.props.xScale);\n  d3.select(this.refs.anchor).classed(\"xAxis\", true).transition().call(axis);\n});\nexport const YAxis = D3blackbox(function () {\n  const axis = d3.axisLeft().tickFormat(d => d).scale(this.props.yScale);\n  d3.select(this.refs.anchor).classed(\"yAxis\", true).transition().call(axis);\n});\nexport const YGrid = D3blackbox(function () {\n  const axis = d3.axisRight().tickFormat(d => null).scale(this.props.yScale).tickSizeOuter(0).tickSizeInner(this.props.plotWidth);\n  d3.select(this.refs.anchor).classed(\"yGrid\", true).call(axis);\n});\nexport const Line = D3blackbox(function () {\n  d3.selectAll(\".valueLine\").transition().duration(10000).remove();\n  d3.selectAll(\"circle\").remove();\n  const path = d3.line().x(d => d.x).y(d => d.y);\n  const parent = d3.select(this.refs.anchor);\n  const current = parent.selectAll(\".valueLine\").data([this.props.plotData]);\n  current.interrupt();\n  const enter = current.enter().append(\"path\").classed(\"valueLine\", true);\n  const valueLine = current.merge(enter);\n  parent.selectAll(\".circle\").exit().remove();\n  parent.selectAll(\".circle\").data(this.props.plotData).enter().append(\"circle\").attr(\"r\", 4).attr(\"cx\", function (d) {\n    return d.x;\n  }).attr(\"cy\", function (d) {\n    return d.y;\n  }).style(\"fill\", \"green\"); // var getdata;\n  // circle.remove();\n  // getdata = this.props.plotData\n  // circle\n  // .data(this.props.plotData)\n  // .transition()\n  // .duration(1000)\n  // .attr(\"r\", 4)\n  // .attr(\"cx\", function(d) {\n  //     return d.x;\n  // })\n  // .attr(\"cy\", function(d) {\n  //     return d.y;\n  // })\n  // .style(\"fill\", \"green\");\n\n  current.transition().attr(\"transform\", \"translate(\".concat(this.props.xSlide, \", 0)\")).on(\"end\", () => {\n    valueLine.attr(\"d\", path); // circle.exit().remove()\n\n    current.attr(\"transform\", null);\n  });\n});","map":{"version":3,"sources":["/Users/langgao/Documents/HiberSense Dashboard/hibersense-dash/src/components/LineChart/ChartComponents.js"],"names":["d3","React","Component","D3blackbox","d3render","Blackbox","componentDidMount","call","componentDidUpdate","render","transform","props","XAxis","axis","axisBottom","tickFormat","d","timeFormat","scale","xScale","select","refs","anchor","classed","transition","YAxis","axisLeft","yScale","YGrid","axisRight","tickSizeOuter","tickSizeInner","plotWidth","Line","selectAll","duration","remove","path","line","x","y","parent","current","data","plotData","interrupt","enter","append","valueLine","merge","exit","attr","style","xSlide","on"],"mappings":"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","sourcesContent":["import * as d3 from \"d3\";\nimport React, { Component } from \"react\";\n\n\nexport const D3blackbox=(d3render)=>{\n  return class Blackbox extends Component {\n    componentDidMount() {\n      d3render.call(this);\n    }\n    componentDidUpdate() {\n      d3render.call(this);\n    }\n\n    render() {\n      const transform = this.props.transform || \"\";\n      return <g transform={transform} ref=\"anchor\" />;\n    }\n  };\n}\n\n\nexport const XAxis = D3blackbox(function() {\n  const axis = d3\n    .axisBottom()\n    .tickFormat(d => d3.timeFormat(\"%H:%M %S\")(d))\n    .scale(this.props.xScale);\n\n  d3\n    .select(this.refs.anchor)\n    .classed(\"xAxis\", true)\n    .transition()\n    .call(axis);\n});\n\nexport const YAxis = D3blackbox(function() {\n  const axis = d3\n    .axisLeft()\n    .tickFormat(d => d)\n    .scale(this.props.yScale);\n\n  d3\n    .select(this.refs.anchor)\n    .classed(\"yAxis\", true)\n    .transition()\n    .call(axis);\n});\n\nexport const YGrid = D3blackbox(function() {\n  const axis = d3\n    .axisRight()\n    .tickFormat(d => null)\n    .scale(this.props.yScale)\n    .tickSizeOuter(0)\n    .tickSizeInner(this.props.plotWidth);\n\n  d3\n    .select(this.refs.anchor)\n    .classed(\"yGrid\", true)\n    .call(axis);\n});\n\nexport const Line = D3blackbox(function() {\n\n    d3.selectAll(\".valueLine\")\n        .transition()\n        .duration(10000)\n        .remove();\n    d3.selectAll(\"circle\").remove();\n\n  const path = d3\n    .line()\n    .x(d => d.x)\n    .y(d => d.y);\n    \n  const parent = d3.select(this.refs.anchor);\n\n  const current = parent.selectAll(\".valueLine\").data([this.props.plotData]);\n\n  current.interrupt();\n\n  const enter = current\n    .enter()\n    .append(\"path\")\n    .classed(\"valueLine\", true);\n\n  const valueLine = current.merge(enter);\n\n  parent.selectAll(\".circle\").exit().remove();\n\n\n\nparent.selectAll(\".circle\")\n    .data(this.props.plotData)\n    .enter().append(\"circle\")\n    .attr(\"r\", 4)\n    .attr(\"cx\", function(d) {\n        return d.x;\n    })\n    .attr(\"cy\", function(d) {\n        return d.y;\n    })\n    .style(\"fill\", \"green\");\n\n\n    // var getdata;\n\n    // circle.remove();\n    // getdata = this.props.plotData\n    \n\n    // circle\n    // .data(this.props.plotData)\n    // .transition()\n    // .duration(1000)\n    // .attr(\"r\", 4)\n    // .attr(\"cx\", function(d) {\n    //     return d.x;\n    // })\n    // .attr(\"cy\", function(d) {\n    //     return d.y;\n    // })\n    // .style(\"fill\", \"green\");\n\n  current\n    .transition()\n    .attr(\"transform\", `translate(${this.props.xSlide}, 0)`)\n    .on(\"end\", () => {\n      valueLine.attr(\"d\", path);\n        // circle.exit().remove()\n      current.attr(\"transform\", null);\n    });\n\n\n\n});"]},"metadata":{},"sourceType":"module"}