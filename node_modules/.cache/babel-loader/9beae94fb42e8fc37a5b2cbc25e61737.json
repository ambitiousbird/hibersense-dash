{"ast":null,"code":"var _jsxFileName = \"/Users/langgao/Documents/HiberSense Dashboard/hibersense-dash/src/components/Rooms/Room.js\";\nimport React, { Component } from 'react';\nimport LineChart from '../LineChart/LineChart';\nimport { connect } from 'react-redux';\nimport { makeData } from '../Utility/DataHandling';\nimport * as d3 from \"d3\";\nimport { changeBathroomTemp, changeLivingroomTemp, changeKitchenTemp, changeBedroomTemp } from '../store/actions/temperatureSettingAction';\n\nclass Room extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      kitchenData: {},\n      bedroomData: {},\n      livingroomData: {},\n      bathroomData: {},\n      cooling: false,\n      heating: false,\n      idle: false\n    };\n  }\n\n  componentWillMount() {\n    const _this$props = this.props,\n          kitchenCurrentTemp = _this$props.kitchenCurrentTemp,\n          bedroomCurrentTemp = _this$props.bedroomCurrentTemp,\n          bathroomCurrentTemp = _this$props.bathroomCurrentTemp,\n          livingroomCurrentTemp = _this$props.livingroomCurrentTemp; //prefill data\n\n    this.setState({\n      kitchenData: makeData(kitchenCurrentTemp, 0.2),\n      bedroomData: makeData(bedroomCurrentTemp, 0.2),\n      livingroomData: makeData(livingroomCurrentTemp, 0.2),\n      bathroomData: makeData(bathroomCurrentTemp, 0.2)\n    });\n  }\n\n  componentDidMount() {\n    const _this$props2 = this.props,\n          roomName = _this$props2.roomName,\n          kitchenTemperature = _this$props2.kitchenTemperature,\n          livingroomTemperature = _this$props2.livingroomTemperature,\n          bathroomTemperature = _this$props2.bathroomTemperature,\n          bedroomTemperature = _this$props2.bedroomTemperature,\n          kitchenCurrentTemp = _this$props2.kitchenCurrentTemp,\n          bedroomCurrentTemp = _this$props2.bedroomCurrentTemp,\n          bathroomCurrentTemp = _this$props2.bathroomCurrentTemp,\n          livingroomCurrentTemp = _this$props2.livingroomCurrentTemp,\n          changeBathroomTemp = _this$props2.changeBathroomTemp,\n          changeLivingroomTemp = _this$props2.changeLivingroomTemp,\n          changeKitchenTemp = _this$props2.changeKitchenTemp,\n          changeBedroomTemp = _this$props2.changeBedroomTemp; // console.log(kitchenTemperature);\n\n    var tempTarget = function () {\n      if (roomName === \"Kitchen\") return kitchenTemperature;\n      if (roomName === \"Livingroom\") return livingroomTemperature;\n      if (roomName === \"Bedroom\") return bedroomTemperature;\n      if (roomName === \"Bathroom\") return bathroomTemperature;\n    }();\n\n    console.log('temptarget', tempTarget);\n    tempTarget = typeof tempTarget === \"number\" ? tempTarget : tempTarget.temperature;\n\n    var currentTemp = function () {\n      if (roomName === \"Kitchen\") return kitchenCurrentTemp;\n      if (roomName === \"Livingroom\") return livingroomCurrentTemp;\n      if (roomName === \"Bedroom\") return bedroomCurrentTemp;\n      if (roomName === \"Bathroom\") return bathroomCurrentTemp;\n    }();\n\n    currentTemp = typeof currentTemp === \"number\" ? currentTemp : currentTemp.temperature;\n    console.log('currentTemp', currentTemp);\n    const tempDiff = tempTarget - currentTemp; // console.log(tempDiff);\n    //set room status: cooling/heating/idle\n\n    if (tempDiff > 0) {\n      this.setState({\n        heating: true,\n        cooling: false,\n        idle: false\n      });\n    } else if (tempDiff < 0) {\n      this.setState({\n        heating: false,\n        cooling: true,\n        idle: false\n      });\n    } else {\n      this.setState({\n        heating: false,\n        cooling: false,\n        idle: true\n      });\n    }\n\n    ;\n    this.showTempInterval = setInterval(() => {\n      console.log('reached platau, temp', currentTemp);\n\n      if (currentTemp === tempTarget) {\n        if (roomName === \"Kitchen\") {\n          var kitchenData = this.state.kitchenData;\n          kitchenData.push({\n            date: new Date(),\n            value: d3.randomNormal(currentTemp, 0.2)()\n          });\n          kitchenData.shift();\n          this.setState({\n            kitchenData: kitchenData\n          });\n        }\n\n        if (roomName === \"Bedroom\") {\n          var bedroomData = this.state.bedroomData;\n          bedroomData.push({\n            date: new Date(),\n            value: d3.randomNormal(currentTemp, 0.2)()\n          });\n          bedroomData.shift();\n          this.setState({\n            bedroomData: bedroomData\n          });\n        }\n\n        if (roomName === \"Bathroom\") {\n          var bathroomData = this.state.bathroomData;\n          bathroomData.push({\n            date: new Date(),\n            value: d3.randomNormal(currentTemp, 0.2)()\n          });\n          bathroomData.shift();\n          this.setState({\n            bathroomData: bathroomData\n          });\n        }\n\n        if (roomName === \"Livingroom\") {\n          var livingroomData = this.state.livingroomData;\n          livingroomData.push({\n            date: new Date(),\n            value: d3.randomNormal(currentTemp, 0.2)()\n          });\n          livingroomData.shift();\n          this.setState({\n            livingroomData: livingroomData\n          });\n        }\n      }\n    }, 1000);\n    this.changeTempInterval = setInterval(() => {\n      if (currentTemp !== tempTarget) {\n        if (roomName === \"Kitchen\") {\n          console.log('wrong???');\n          currentTemp = Math.round((currentTemp + tempDiff / 10) * 10) / 10;\n          changeKitchenTemp(currentTemp);\n          console.log('currentTemp', currentTemp);\n          var kitchenData = this.state.kitchenData; // console.log('kitchenData',kitchenData)\n\n          kitchenData.push({\n            date: new Date(),\n            value: d3.randomNormal(currentTemp, 0.2)()\n          });\n          kitchenData.shift();\n          console.log('kitchenData', kitchenData);\n          this.setState({\n            kitchenData: kitchenData\n          });\n          console.log(\"this.state.kitchenData\", this.state.kitchenData);\n        }\n\n        if (roomName === \"Bedroom\") {\n          currentTemp = Math.round((currentTemp + tempDiff / 10) * 10) / 10;\n          changeBedroomTemp(currentTemp);\n          var bedroomData = this.state.bedroomData;\n          bedroomData.push({\n            date: new Date(),\n            value: d3.randomNormal(currentTemp, 0.2)()\n          });\n          bedroomData.shift();\n          this.setState({\n            bedroomData: bedroomData\n          });\n        }\n\n        if (roomName === \"Bathroom\") {\n          currentTemp = Math.round((currentTemp + tempDiff / 10) * 10) / 10;\n          changeBathroomTemp(currentTemp);\n          var bathroomData = this.state.bathroomData;\n          bathroomData.push({\n            date: new Date(),\n            value: d3.randomNormal(currentTemp, 0.2)()\n          });\n          bathroomData.shift();\n          this.setState({\n            bathroomData: bathroomData\n          });\n        }\n\n        if (roomName === \"Livingroom\") {\n          currentTemp = Math.round((currentTemp + tempDiff / 10) * 10) / 10;\n          changeLivingroomTemp(currentTemp);\n          var livingroomData = this.state.livingroomData;\n          livingroomData.push({\n            date: new Date(),\n            value: d3.randomNormal(currentTemp, 0.2)()\n          });\n          livingroomData.shift();\n          this.setState({\n            livingroomData: livingroomData\n          });\n        }\n\n        tempTarget = Math.round(tempTarget * 10) / 10;\n\n        if (currentTemp === tempTarget) {\n          clearInterval(this.changeTempInterval);\n        }\n      }\n    }, 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.changeTempInterval);\n    clearInterval(this.showTempInterval);\n  }\n\n  render() {\n    const _this$props3 = this.props,\n          roomName = _this$props3.roomName,\n          type = _this$props3.type;\n    const _this$state = this.state,\n          kitchenData = _this$state.kitchenData,\n          bedroomData = _this$state.bedroomData,\n          livingroomData = _this$state.livingroomData,\n          bathroomData = _this$state.bathroomData,\n          cooling = _this$state.cooling,\n          heating = _this$state.heating,\n          idle = _this$state.idle;\n\n    var data = function () {\n      if (roomName === \"Kitchen\") return kitchenData;\n      if (roomName === \"Livingroom\") return livingroomData;\n      if (roomName === \"Bedroom\") return bedroomData;\n      if (roomName === \"Bathroom\") return bathroomData;\n    }();\n\n    var Temperature = data[data.length - 1].value;\n    Temperature = Math.round(Temperature * 100) / 100;\n    return React.createElement(\"div\", {\n      className: \"room\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }, roomName), React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }, \"Temperature: \", Temperature, \"\\xB0F \"), React.createElement(\"h6\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234\n      },\n      __self: this\n    }, \"Status:cooling\"), React.createElement(LineChart, {\n      type: type,\n      width: 600,\n      height: 400,\n      title: 'Current Temperature',\n      data: data,\n      range: [65, 90],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    kitchenTemperature: state.temperature.kitchenTemperature,\n    livingroomTemperature: state.temperature.livingroomTemperature,\n    bedroomTemperature: state.temperature.bedroomTemperature,\n    bathroomTemperature: state.temperature.bathroomTemperature,\n    livingroomCurrentTemp: state.temperature.livingroomCurrentTemp,\n    bedroomCurrentTemp: state.temperature.bedroomCurrentTemp,\n    bathroomCurrentTemp: state.temperature.bathroomCurrentTemp,\n    kitchenCurrentTemp: state.temperature.kitchenCurrentTemp\n  };\n};\n\nexport default connect(mapStateToProps, {\n  changeBathroomTemp,\n  changeLivingroomTemp,\n  changeKitchenTemp,\n  changeBedroomTemp\n})(Room);","map":{"version":3,"sources":["/Users/langgao/Documents/HiberSense Dashboard/hibersense-dash/src/components/Rooms/Room.js"],"names":["React","Component","LineChart","connect","makeData","d3","changeBathroomTemp","changeLivingroomTemp","changeKitchenTemp","changeBedroomTemp","Room","constructor","props","state","kitchenData","bedroomData","livingroomData","bathroomData","cooling","heating","idle","componentWillMount","kitchenCurrentTemp","bedroomCurrentTemp","bathroomCurrentTemp","livingroomCurrentTemp","setState","componentDidMount","roomName","kitchenTemperature","livingroomTemperature","bathroomTemperature","bedroomTemperature","tempTarget","console","log","temperature","currentTemp","tempDiff","showTempInterval","setInterval","push","date","Date","value","randomNormal","shift","changeTempInterval","Math","round","clearInterval","componentWillUnmount","render","type","data","Temperature","length","mapStateToProps"],"mappings":";AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,QAAR,QAAuB,yBAAvB;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;AACA,SAAQC,kBAAR,EAA4BC,oBAA5B,EAAiDC,iBAAjD,EAAmEC,iBAAnE,QAA2F,2CAA3F;;AAEA,MAAMC,IAAN,SAAmBT,SAAnB,CAA6B;AAC3BU,EAAAA,WAAW,CAACC,KAAD,EAAO;AAChB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAW;AACTC,MAAAA,WAAW,EAAC,EADH;AAETC,MAAAA,WAAW,EAAC,EAFH;AAGTC,MAAAA,cAAc,EAAC,EAHN;AAITC,MAAAA,YAAY,EAAC,EAJJ;AAKTC,MAAAA,OAAO,EAAC,KALC;AAMTC,MAAAA,OAAO,EAAC,KANC;AAOTC,MAAAA,IAAI,EAAC;AAPI,KAAX;AASD;;AAEDC,EAAAA,kBAAkB,GAAE;AAAA,wBAIS,KAAKT,KAJd;AAAA,UACXU,kBADW,eACXA,kBADW;AAAA,UAEhBC,kBAFgB,eAEhBA,kBAFgB;AAAA,UAGhBC,mBAHgB,eAGhBA,mBAHgB;AAAA,UAIhBC,qBAJgB,eAIhBA,qBAJgB,EAKlB;;AACA,SAAKC,QAAL,CAAc;AACZZ,MAAAA,WAAW,EAACV,QAAQ,CAACkB,kBAAD,EAAoB,GAApB,CADR;AAEZP,MAAAA,WAAW,EAACX,QAAQ,CAACmB,kBAAD,EAAoB,GAApB,CAFR;AAGZP,MAAAA,cAAc,EAACZ,QAAQ,CAACqB,qBAAD,EAAuB,GAAvB,CAHX;AAIZR,MAAAA,YAAY,EAACb,QAAQ,CAACoB,mBAAD,EAAqB,GAArB;AAJT,KAAd;AAMD;;AAEDG,EAAAA,iBAAiB,GAAE;AAAA,yBAkBb,KAAKf,KAlBQ;AAAA,UAEfgB,QAFe,gBAEfA,QAFe;AAAA,UAGfC,kBAHe,gBAGfA,kBAHe;AAAA,UAIfC,qBAJe,gBAIfA,qBAJe;AAAA,UAKfC,mBALe,gBAKfA,mBALe;AAAA,UAMfC,kBANe,gBAMfA,kBANe;AAAA,UAQfV,kBARe,gBAQfA,kBARe;AAAA,UASfC,kBATe,gBASfA,kBATe;AAAA,UAUfC,mBAVe,gBAUfA,mBAVe;AAAA,UAWfC,qBAXe,gBAWfA,qBAXe;AAAA,UAafnB,kBAbe,gBAafA,kBAbe;AAAA,UAcfC,oBAde,gBAcfA,oBAde;AAAA,UAefC,iBAfe,gBAefA,iBAfe;AAAA,UAgBfC,iBAhBe,gBAgBfA,iBAhBe,EAsBjB;;AAEA,QAAIwB,UAAU,GAAG,YAAU;AACzB,UAAGL,QAAQ,KAAG,SAAd,EAAyB,OAAOC,kBAAP;AACzB,UAAGD,QAAQ,KAAG,YAAd,EAA4B,OAAOE,qBAAP;AAC5B,UAAGF,QAAQ,KAAG,SAAd,EAAyB,OAAOI,kBAAP;AACzB,UAAGJ,QAAQ,KAAG,UAAd,EAAyB,OAAOG,mBAAP;AAC1B,KALe,EAAhB;;AAMAG,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAAyBF,UAAzB;AAEAA,IAAAA,UAAU,GAAG,OAAOA,UAAP,KAAsB,QAAtB,GAAgCA,UAAhC,GAA4CA,UAAU,CAACG,WAApE;;AAEA,QAAIC,WAAW,GAAG,YAAU;AAC1B,UAAGT,QAAQ,KAAG,SAAd,EAAyB,OAAON,kBAAP;AACzB,UAAGM,QAAQ,KAAG,YAAd,EAA4B,OAAOH,qBAAP;AAC5B,UAAGG,QAAQ,KAAG,SAAd,EAAyB,OAAOL,kBAAP;AACzB,UAAGK,QAAQ,KAAG,UAAd,EAAyB,OAAOJ,mBAAP;AAC1B,KALgB,EAAjB;;AAQAa,IAAAA,WAAW,GAAG,OAAOA,WAAP,KAAuB,QAAvB,GAAiCA,WAAjC,GAA8CA,WAAW,CAACD,WAAxE;AACAF,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA0BE,WAA1B;AAEA,UAAMC,QAAQ,GAAGL,UAAU,GAAGI,WAA9B,CA7CiB,CA+CjB;AAKA;;AACA,QAAGC,QAAQ,GAAC,CAAZ,EAAc;AACZ,WAAKZ,QAAL,CAAc;AAACP,QAAAA,OAAO,EAAE,IAAV;AAAgBD,QAAAA,OAAO,EAAC,KAAxB;AAA+BE,QAAAA,IAAI,EAAC;AAApC,OAAd;AACD,KAFD,MAEM,IAAGkB,QAAQ,GAAE,CAAb,EAAe;AACnB,WAAKZ,QAAL,CAAc;AAACP,QAAAA,OAAO,EAAE,KAAV;AAAiBD,QAAAA,OAAO,EAAC,IAAzB;AAA8BE,QAAAA,IAAI,EAAC;AAAnC,OAAd;AACD,KAFK,MAED;AACH,WAAKM,QAAL,CAAc;AAACP,QAAAA,OAAO,EAAE,KAAV;AAAiBD,QAAAA,OAAO,EAAC,KAAzB;AAA+BE,QAAAA,IAAI,EAAC;AAApC,OAAd;AACD;;AAAA;AAGD,SAAKmB,gBAAL,GAAwBC,WAAW,CAAC,MAAI;AACtCN,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCE,WAApC;;AACA,UAAGA,WAAW,KAAKJ,UAAnB,EAA8B;AAC5B,YAAGL,QAAQ,KAAG,SAAd,EAAyB;AACvB,cAAId,WAAW,GAAG,KAAKD,KAAL,CAAWC,WAA7B;AACAA,UAAAA,WAAW,CAAC2B,IAAZ,CAAiB;AAACC,YAAAA,IAAI,EAAC,IAAIC,IAAJ,EAAN;AAAiBC,YAAAA,KAAK,EAACvC,EAAE,CAACwC,YAAH,CAAgBR,WAAhB,EAA6B,GAA7B;AAAvB,WAAjB;AACAvB,UAAAA,WAAW,CAACgC,KAAZ;AAEA,eAAKpB,QAAL,CAAc;AACZZ,YAAAA,WAAW,EAACA;AADA,WAAd;AAGD;;AACD,YAAGc,QAAQ,KAAG,SAAd,EAAyB;AACvB,cAAIb,WAAW,GAAG,KAAKF,KAAL,CAAWE,WAA7B;AACAA,UAAAA,WAAW,CAAC0B,IAAZ,CAAiB;AAACC,YAAAA,IAAI,EAAC,IAAIC,IAAJ,EAAN;AAAiBC,YAAAA,KAAK,EAACvC,EAAE,CAACwC,YAAH,CAAgBR,WAAhB,EAA6B,GAA7B;AAAvB,WAAjB;AACAtB,UAAAA,WAAW,CAAC+B,KAAZ;AAEA,eAAKpB,QAAL,CAAc;AACZX,YAAAA,WAAW,EAACA;AADA,WAAd;AAGD;;AAED,YAAGa,QAAQ,KAAG,UAAd,EAA0B;AACxB,cAAIX,YAAY,GAAG,KAAKJ,KAAL,CAAWI,YAA9B;AACAA,UAAAA,YAAY,CAACwB,IAAb,CAAkB;AAACC,YAAAA,IAAI,EAAC,IAAIC,IAAJ,EAAN;AAAiBC,YAAAA,KAAK,EAACvC,EAAE,CAACwC,YAAH,CAAgBR,WAAhB,EAA6B,GAA7B;AAAvB,WAAlB;AACApB,UAAAA,YAAY,CAAC6B,KAAb;AAEA,eAAKpB,QAAL,CAAc;AACZT,YAAAA,YAAY,EAACA;AADD,WAAd;AAGD;;AACD,YAAGW,QAAQ,KAAG,YAAd,EAA4B;AAC1B,cAAIZ,cAAc,GAAG,KAAKH,KAAL,CAAWG,cAAhC;AACAA,UAAAA,cAAc,CAACyB,IAAf,CAAoB;AAACC,YAAAA,IAAI,EAAC,IAAIC,IAAJ,EAAN;AAAiBC,YAAAA,KAAK,EAACvC,EAAE,CAACwC,YAAH,CAAgBR,WAAhB,EAA6B,GAA7B;AAAvB,WAApB;AACArB,UAAAA,cAAc,CAAC8B,KAAf;AAEA,eAAKpB,QAAL,CAAc;AACZV,YAAAA,cAAc,EAACA;AADH,WAAd;AAGD;AAEF;AAAC,KAzC+B,EAyC9B,IAzC8B,CAAnC;AA2CA,SAAK+B,kBAAL,GAA0BP,WAAW,CAAC,MAAI;AACxC,UAAGH,WAAW,KAAGJ,UAAjB,EAA4B;AAC1B,YAAGL,QAAQ,KAAG,SAAd,EAAyB;AACvBM,UAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACAE,UAAAA,WAAW,GAACW,IAAI,CAACC,KAAL,CAAW,CAACZ,WAAW,GAACC,QAAQ,GAAC,EAAtB,IAA0B,EAArC,IAAyC,EAArD;AACA9B,UAAAA,iBAAiB,CAAC6B,WAAD,CAAjB;AACAH,UAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA0BE,WAA1B;AACA,cAAIvB,WAAW,GAAG,KAAKD,KAAL,CAAWC,WAA7B,CALuB,CAOvB;;AACAA,UAAAA,WAAW,CAAC2B,IAAZ,CAAiB;AAACC,YAAAA,IAAI,EAAC,IAAIC,IAAJ,EAAN;AAAiBC,YAAAA,KAAK,EAACvC,EAAE,CAACwC,YAAH,CAAgBR,WAAhB,EAA6B,GAA7B;AAAvB,WAAjB;AACAvB,UAAAA,WAAW,CAACgC,KAAZ;AACAZ,UAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA0BrB,WAA1B;AACA,eAAKY,QAAL,CAAc;AACZZ,YAAAA,WAAW,EAACA;AADA,WAAd;AAGAoB,UAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAqC,KAAKtB,KAAL,CAAWC,WAAhD;AACD;;AACD,YAAGc,QAAQ,KAAG,SAAd,EAAyB;AACvBS,UAAAA,WAAW,GAACW,IAAI,CAACC,KAAL,CAAW,CAACZ,WAAW,GAACC,QAAQ,GAAC,EAAtB,IAA0B,EAArC,IAAyC,EAArD;AACA7B,UAAAA,iBAAiB,CAAC4B,WAAD,CAAjB;AACA,cAAItB,WAAW,GAAG,KAAKF,KAAL,CAAWE,WAA7B;AACAA,UAAAA,WAAW,CAAC0B,IAAZ,CAAiB;AAACC,YAAAA,IAAI,EAAC,IAAIC,IAAJ,EAAN;AAAiBC,YAAAA,KAAK,EAACvC,EAAE,CAACwC,YAAH,CAAgBR,WAAhB,EAA6B,GAA7B;AAAvB,WAAjB;AACAtB,UAAAA,WAAW,CAAC+B,KAAZ;AACA,eAAKpB,QAAL,CAAc;AACZX,YAAAA,WAAW,EAACA;AADA,WAAd;AAGD;;AACD,YAAGa,QAAQ,KAAG,UAAd,EAA0B;AACxBS,UAAAA,WAAW,GAACW,IAAI,CAACC,KAAL,CAAW,CAACZ,WAAW,GAACC,QAAQ,GAAC,EAAtB,IAA0B,EAArC,IAAyC,EAArD;AACAhC,UAAAA,kBAAkB,CAAC+B,WAAD,CAAlB;AACA,cAAIpB,YAAY,GAAG,KAAKJ,KAAL,CAAWI,YAA9B;AACAA,UAAAA,YAAY,CAACwB,IAAb,CAAkB;AAACC,YAAAA,IAAI,EAAC,IAAIC,IAAJ,EAAN;AAAiBC,YAAAA,KAAK,EAACvC,EAAE,CAACwC,YAAH,CAAgBR,WAAhB,EAA6B,GAA7B;AAAvB,WAAlB;AACApB,UAAAA,YAAY,CAAC6B,KAAb;AACA,eAAKpB,QAAL,CAAc;AACZT,YAAAA,YAAY,EAACA;AADD,WAAd;AAGD;;AACD,YAAGW,QAAQ,KAAG,YAAd,EAA4B;AAC1BS,UAAAA,WAAW,GAACW,IAAI,CAACC,KAAL,CAAW,CAACZ,WAAW,GAACC,QAAQ,GAAC,EAAtB,IAA0B,EAArC,IAAyC,EAArD;AACA/B,UAAAA,oBAAoB,CAAC8B,WAAD,CAApB;AACA,cAAIrB,cAAc,GAAG,KAAKH,KAAL,CAAWG,cAAhC;AACAA,UAAAA,cAAc,CAACyB,IAAf,CAAoB;AAACC,YAAAA,IAAI,EAAC,IAAIC,IAAJ,EAAN;AAAiBC,YAAAA,KAAK,EAACvC,EAAE,CAACwC,YAAH,CAAgBR,WAAhB,EAA6B,GAA7B;AAAvB,WAApB;AACArB,UAAAA,cAAc,CAAC8B,KAAf;AACA,eAAKpB,QAAL,CAAc;AACZV,YAAAA,cAAc,EAACA;AADH,WAAd;AAGD;;AAEDiB,QAAAA,UAAU,GAAGe,IAAI,CAACC,KAAL,CAAWhB,UAAU,GAAC,EAAtB,IAA0B,EAAvC;;AAEA,YAAGI,WAAW,KAAKJ,UAAnB,EAA8B;AAC5BiB,UAAAA,aAAa,CAAC,KAAKH,kBAAN,CAAb;AACD;AACF;AACF,KAvDoC,EAuDnC,IAvDmC,CAArC;AAyDD;;AAEDI,EAAAA,oBAAoB,GAAE;AACpBD,IAAAA,aAAa,CAAC,KAAKH,kBAAN,CAAb;AACAG,IAAAA,aAAa,CAAC,KAAKX,gBAAN,CAAb;AACD;;AAKDa,EAAAA,MAAM,GAAG;AAAA,yBACgB,KAAKxC,KADrB;AAAA,UACAgB,QADA,gBACAA,QADA;AAAA,UACSyB,IADT,gBACSA,IADT;AAAA,wBAUH,KAAKxC,KAVF;AAAA,UAGLC,WAHK,eAGLA,WAHK;AAAA,UAILC,WAJK,eAILA,WAJK;AAAA,UAKLC,cALK,eAKLA,cALK;AAAA,UAMLC,YANK,eAMLA,YANK;AAAA,UAOLC,OAPK,eAOLA,OAPK;AAAA,UAQLC,OARK,eAQLA,OARK;AAAA,UASLC,IATK,eASLA,IATK;;AAaP,QAAIkC,IAAI,GAAG,YAAU;AACnB,UAAG1B,QAAQ,KAAG,SAAd,EAAyB,OAAOd,WAAP;AACzB,UAAGc,QAAQ,KAAG,YAAd,EAA4B,OAAOZ,cAAP;AAC5B,UAAGY,QAAQ,KAAG,SAAd,EAAyB,OAAOb,WAAP;AACzB,UAAGa,QAAQ,KAAG,UAAd,EAAyB,OAAOX,YAAP;AAC1B,KALS,EAAV;;AAMA,QAAIsC,WAAW,GAAGD,IAAI,CAACA,IAAI,CAACE,MAAL,GAAY,CAAb,CAAJ,CAAoBZ,KAAtC;AACAW,IAAAA,WAAW,GAAGP,IAAI,CAACC,KAAL,CAAWM,WAAW,GAAC,GAAvB,IAA4B,GAA1C;AACA,WACE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAK3B,QAAL,CADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAkB2B,WAAlB,WAFJ,EAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAHJ,EAKI,oBAAC,SAAD;AACI,MAAA,IAAI,EAAEF,IADV;AAEI,MAAA,KAAK,EAAE,GAFX;AAGI,MAAA,MAAM,EAAE,GAHZ;AAII,MAAA,KAAK,EAAE,qBAJX;AAKI,MAAA,IAAI,EAAIC,IALZ;AAMI,MAAA,KAAK,EAAE,CAAC,EAAD,EAAI,EAAJ,CANX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALJ,CADF;AAgBD;;AA7O0B;;AAgP7B,MAAMG,eAAe,GAAC5C,KAAK,IAAE;AAC3B,SAAM;AACJgB,IAAAA,kBAAkB,EAAEhB,KAAK,CAACuB,WAAN,CAAkBP,kBADlC;AAEJC,IAAAA,qBAAqB,EAAEjB,KAAK,CAACuB,WAAN,CAAkBN,qBAFrC;AAGJE,IAAAA,kBAAkB,EAAEnB,KAAK,CAACuB,WAAN,CAAkBJ,kBAHlC;AAIJD,IAAAA,mBAAmB,EAAElB,KAAK,CAACuB,WAAN,CAAkBL,mBAJnC;AAMJN,IAAAA,qBAAqB,EAACZ,KAAK,CAACuB,WAAN,CAAkBX,qBANpC;AAOJF,IAAAA,kBAAkB,EAACV,KAAK,CAACuB,WAAN,CAAkBb,kBAPjC;AAQJC,IAAAA,mBAAmB,EAACX,KAAK,CAACuB,WAAN,CAAkBZ,mBARlC;AASJF,IAAAA,kBAAkB,EAACT,KAAK,CAACuB,WAAN,CAAkBd;AATjC,GAAN;AAWD,CAZD;;AAcA,eAAenB,OAAO,CAACsD,eAAD,EAAkB;AACtCnD,EAAAA,kBADsC;AAEtCC,EAAAA,oBAFsC;AAGtCC,EAAAA,iBAHsC;AAItCC,EAAAA;AAJsC,CAAlB,CAAP,CASZC,IATY,CAAf","sourcesContent":["\nimport React, { Component } from 'react'\nimport LineChart from '../LineChart/LineChart';\nimport {connect} from 'react-redux';\nimport {makeData} from '../Utility/DataHandling';\nimport * as d3 from \"d3\";\nimport {changeBathroomTemp, changeLivingroomTemp,changeKitchenTemp,changeBedroomTemp} from '../store/actions/temperatureSettingAction';\n\nclass Room extends Component {\n  constructor(props){\n    super(props);\n    this.state={\n      kitchenData:{},\n      bedroomData:{},\n      livingroomData:{},\n      bathroomData:{},\n      cooling:false,\n      heating:false,\n      idle:false\n    }\n  }\n\n  componentWillMount(){\n    const {kitchenCurrentTemp,\n      bedroomCurrentTemp,\n      bathroomCurrentTemp,\n      livingroomCurrentTemp} = this.props;\n    //prefill data\n    this.setState({\n      kitchenData:makeData(kitchenCurrentTemp,0.2),\n      bedroomData:makeData(bedroomCurrentTemp,0.2),\n      livingroomData:makeData(livingroomCurrentTemp,0.2),\n      bathroomData:makeData(bathroomCurrentTemp,0.2),\n    })\n  }\n  \n  componentDidMount(){\n    const {\n      roomName, \n      kitchenTemperature,\n      livingroomTemperature,\n      bathroomTemperature,\n      bedroomTemperature,\n\n      kitchenCurrentTemp,\n      bedroomCurrentTemp,\n      bathroomCurrentTemp,\n      livingroomCurrentTemp,\n\n      changeBathroomTemp, \n      changeLivingroomTemp,\n      changeKitchenTemp,\n      changeBedroomTemp\n    \n    } = this.props;\n\n\n\n    // console.log(kitchenTemperature);\n\n    var tempTarget =(function(){\n      if(roomName===\"Kitchen\") return kitchenTemperature;\n      if(roomName===\"Livingroom\") return livingroomTemperature;\n      if(roomName===\"Bedroom\") return bedroomTemperature;\n      if(roomName===\"Bathroom\")return bathroomTemperature;\n    })();\n    console.log('temptarget',tempTarget);\n\n    tempTarget = typeof tempTarget === \"number\"? tempTarget: tempTarget.temperature;\n\n    var currentTemp =(function(){\n      if(roomName===\"Kitchen\") return kitchenCurrentTemp;\n      if(roomName===\"Livingroom\") return livingroomCurrentTemp;\n      if(roomName===\"Bedroom\") return bedroomCurrentTemp;\n      if(roomName===\"Bathroom\")return bathroomCurrentTemp;\n    })();\n\n\n    currentTemp = typeof currentTemp === \"number\"? currentTemp: currentTemp.temperature;\n    console.log('currentTemp',currentTemp);\n\n    const tempDiff = tempTarget - currentTemp;\n\n    // console.log(tempDiff);\n\n\n\n\n    //set room status: cooling/heating/idle\n    if(tempDiff>0){\n      this.setState({heating: true, cooling:false, idle:false})\n    }else if(tempDiff <0){\n      this.setState({heating: false, cooling:true,idle:false})\n    }else{\n      this.setState({heating: false, cooling:false,idle:true})\n    };\n\n\n    this.showTempInterval = setInterval(()=>{\n      console.log('reached platau, temp', currentTemp);\n      if(currentTemp === tempTarget){\n        if(roomName===\"Kitchen\") {\n          var kitchenData = this.state.kitchenData;\n          kitchenData.push({date:new Date(),value:d3.randomNormal(currentTemp, 0.2)()});\n          kitchenData.shift();\n\n          this.setState({\n            kitchenData:kitchenData\n          })\n        }\n        if(roomName===\"Bedroom\") {\n          var bedroomData = this.state.bedroomData;\n          bedroomData.push({date:new Date(),value:d3.randomNormal(currentTemp, 0.2)()});\n          bedroomData.shift();\n\n          this.setState({\n            bedroomData:bedroomData\n          })\n        }\n\n        if(roomName===\"Bathroom\") {\n          var bathroomData = this.state.bathroomData;\n          bathroomData.push({date:new Date(),value:d3.randomNormal(currentTemp, 0.2)()});\n          bathroomData.shift();\n          \n          this.setState({\n            bathroomData:bathroomData\n          })\n        }\n        if(roomName===\"Livingroom\") {\n          var livingroomData = this.state.livingroomData;\n          livingroomData.push({date:new Date(),value:d3.randomNormal(currentTemp, 0.2)()});\n          livingroomData.shift();\n          \n          this.setState({\n            livingroomData:livingroomData\n          })\n        }\n\n      }},1000)\n\n    this.changeTempInterval = setInterval(()=>{\n      if(currentTemp!==tempTarget){\n        if(roomName===\"Kitchen\") {\n          console.log('wrong???')\n          currentTemp=Math.round((currentTemp+tempDiff/10)*10)/10;\n          changeKitchenTemp(currentTemp);\n          console.log('currentTemp',currentTemp)\n          var kitchenData = this.state.kitchenData;\n\n          // console.log('kitchenData',kitchenData)\n          kitchenData.push({date:new Date(),value:d3.randomNormal(currentTemp, 0.2)()});\n          kitchenData.shift();\n          console.log('kitchenData',kitchenData)\n          this.setState({\n            kitchenData:kitchenData\n          })\n          console.log(\"this.state.kitchenData\",this.state.kitchenData);\n        }\n        if(roomName===\"Bedroom\") {\n          currentTemp=Math.round((currentTemp+tempDiff/10)*10)/10;\n          changeBedroomTemp(currentTemp);\n          var bedroomData = this.state.bedroomData;\n          bedroomData.push({date:new Date(),value:d3.randomNormal(currentTemp, 0.2)()});\n          bedroomData.shift();\n          this.setState({\n            bedroomData:bedroomData\n          })\n        }\n        if(roomName===\"Bathroom\") {\n          currentTemp=Math.round((currentTemp+tempDiff/10)*10)/10;\n          changeBathroomTemp(currentTemp);\n          var bathroomData = this.state.bathroomData;\n          bathroomData.push({date:new Date(),value:d3.randomNormal(currentTemp, 0.2)()});\n          bathroomData.shift();\n          this.setState({\n            bathroomData:bathroomData\n          })\n        }\n        if(roomName===\"Livingroom\") {\n          currentTemp=Math.round((currentTemp+tempDiff/10)*10)/10;\n          changeLivingroomTemp(currentTemp);\n          var livingroomData = this.state.livingroomData;\n          livingroomData.push({date:new Date(),value:d3.randomNormal(currentTemp, 0.2)()});\n          livingroomData.shift();\n          this.setState({\n            livingroomData:livingroomData\n          })\n        }\n  \n        tempTarget = Math.round(tempTarget*10)/10;\n        \n        if(currentTemp === tempTarget){\n          clearInterval(this.changeTempInterval);\n        }\n      }\n    },1000)\n\n  }\n\n  componentWillUnmount(){\n    clearInterval(this.changeTempInterval);\n    clearInterval(this.showTempInterval);\n  }\n\n\n\n\n  render() {\n    const {roomName,type} =this.props;\n    const {\n      kitchenData,\n      bedroomData,\n      livingroomData,\n      bathroomData,\n      cooling,\n      heating,\n      idle\n    } = this.state;\n\n    \n    var data =(function(){\n      if(roomName===\"Kitchen\") return kitchenData;\n      if(roomName===\"Livingroom\") return livingroomData;\n      if(roomName===\"Bedroom\") return bedroomData;\n      if(roomName===\"Bathroom\")return bathroomData;\n    })();\n    var Temperature = data[data.length-1].value;\n    Temperature = Math.round(Temperature*100)/100;\n    return (\n      <div className='room'>\n          <h1>{roomName}</h1>\n          <h5>Temperature: {Temperature}°F </h5>\n          <h6>Status:cooling</h6>\n\n          <LineChart \n              type={type}\n              width={600} \n              height={400}\n              title={'Current Temperature'}\n              data = {data}\n              range={[65,90]}\n          />\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps=state=>{\n  return{\n    kitchenTemperature: state.temperature.kitchenTemperature,\n    livingroomTemperature: state.temperature.livingroomTemperature,\n    bedroomTemperature: state.temperature.bedroomTemperature,\n    bathroomTemperature: state.temperature.bathroomTemperature,\n\n    livingroomCurrentTemp:state.temperature.livingroomCurrentTemp,\n    bedroomCurrentTemp:state.temperature.bedroomCurrentTemp,\n    bathroomCurrentTemp:state.temperature.bathroomCurrentTemp,\n    kitchenCurrentTemp:state.temperature.kitchenCurrentTemp,\n  }\n}\n\nexport default connect(mapStateToProps, {\n  changeBathroomTemp, \n  changeLivingroomTemp,\n  changeKitchenTemp,\n  changeBedroomTemp,\n\n\n\n\n})(Room);\n"]},"metadata":{},"sourceType":"module"}