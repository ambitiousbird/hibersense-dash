{"ast":null,"code":"var _jsxFileName = \"/Users/langgao/Documents/HiberSense Dashboard/hibersense-dash/src/components/Rooms/Room.js\";\nimport React, { Component } from 'react';\nimport LineChart from '../LineChart/LineChart';\nimport { connect } from 'react-redux';\nimport { makeData } from '../Utility/DataHandling';\nimport * as d3 from \"d3\";\nimport { changeBathroomTemp, changeLivingroomTemp, changeKitchenTemp, changeBedroomTemp, setLivingroomStatus, setKitchenStatus, setBathroomStatus, setBedroomStatus, setLivingroomTempData, setBedroomTempData, setBathroomTempData, setKitchenTempData } from '../store/actions/temperatureSettingAction';\n\nclass Room extends Component {\n  constructor(props) {\n    super();\n  }\n\n  componentWillMount() {\n    const _this$props = this.props,\n          kitchenCurrentTemp = _this$props.kitchenCurrentTemp,\n          bedroomCurrentTemp = _this$props.bedroomCurrentTemp,\n          bathroomCurrentTemp = _this$props.bathroomCurrentTemp,\n          livingroomCurrentTemp = _this$props.livingroomCurrentTemp,\n          setLivingroomTempData = _this$props.setLivingroomTempData,\n          setBedroomTempData = _this$props.setBedroomTempData,\n          setBathroomTempData = _this$props.setBathroomTempData,\n          setKitchenTempData = _this$props.setKitchenTempData; //prefill data\n\n    setLivingroomTempData(makeData(livingroomCurrentTemp, 0.2));\n    setBedroomTempData(makeData(bedroomCurrentTemp, 0.2));\n    setBathroomTempData(makeData(bathroomCurrentTemp, 0.2));\n    setKitchenTempData(makeData(kitchenCurrentTemp, 0.2));\n  }\n\n  componentDidMount() {\n    const _this$props2 = this.props,\n          roomName = _this$props2.roomName,\n          kitchenTemperature = _this$props2.kitchenTemperature,\n          livingroomTemperature = _this$props2.livingroomTemperature,\n          bathroomTemperature = _this$props2.bathroomTemperature,\n          bedroomTemperature = _this$props2.bedroomTemperature,\n          kitchenCurrentTemp = _this$props2.kitchenCurrentTemp,\n          bedroomCurrentTemp = _this$props2.bedroomCurrentTemp,\n          bathroomCurrentTemp = _this$props2.bathroomCurrentTemp,\n          livingroomCurrentTemp = _this$props2.livingroomCurrentTemp,\n          livingroomStatus = _this$props2.livingroomStatus,\n          bedroomStatus = _this$props2.bedroomStatus,\n          bathroomStatus = _this$props2.bathroomStatus,\n          kitchenStatus = _this$props2.kitchenStatus,\n          livingroomTempData = _this$props2.livingroomTempData,\n          bedroomTempData = _this$props2.bedroomTempData,\n          bathroomTempData = _this$props2.bathroomTempData,\n          kitchenTempData = _this$props2.kitchenTempData,\n          changeBathroomTemp = _this$props2.changeBathroomTemp,\n          changeLivingroomTemp = _this$props2.changeLivingroomTemp,\n          changeKitchenTemp = _this$props2.changeKitchenTemp,\n          changeBedroomTemp = _this$props2.changeBedroomTemp,\n          setLivingroomStatus = _this$props2.setLivingroomStatus,\n          setKitchenStatus = _this$props2.setKitchenStatus,\n          setBathroomStatus = _this$props2.setBathroomStatus,\n          setBedroomStatus = _this$props2.setBedroomStatus,\n          setLivingroomTempData = _this$props2.setLivingroomTempData,\n          setBedroomTempData = _this$props2.setBedroomTempData,\n          setBathroomTempData = _this$props2.setBathroomTempData,\n          setKitchenTempData = _this$props2.setKitchenTempData;\n\n    const temp = function () {\n      if (roomName === \"Kitchen\") return {\n        kitchenTemperature,\n        kitchenCurrentTemp\n      };\n      if (roomName === \"Livingroom\") return {\n        livingroomTemperature,\n        livingroomCurrentTemp\n      };\n      if (roomName === \"Bedroom\") return {\n        bedroomTemperature,\n        bedroomCurrentTemp\n      };\n      if (roomName === \"Bathroom\") return {\n        bathroomTemperature,\n        bathroomCurrentTemp\n      };\n    }();\n\n    var tempTarget = temp.tempTarget,\n        currentTemp = temp.currentTemp;\n    tempTarget = typeof tempTarget === \"number\" ? tempTarget : tempTarget.temperature;\n    currentTemp = typeof currentTemp === \"number\" ? currentTemp : currentTemp.temperature;\n    const tempDiff = tempTarget - currentTemp; //set room status: cooling/heating/idle\n\n    if (tempDiff > 0) {\n      this.setState({\n        heating: true,\n        cooling: false,\n        idle: false\n      });\n    } else if (tempDiff < 0) {\n      this.setState({\n        heating: false,\n        cooling: true,\n        idle: false\n      });\n    } else {\n      this.setState({\n        heating: false,\n        cooling: false,\n        idle: true\n      });\n    }\n\n    ;\n    this.showTempInterval = setInterval(() => {\n      if (currentTemp === tempTarget) {\n        if (roomName === \"Kitchen\") {\n          var kitchenData = this.state.kitchenData;\n          kitchenData.push({\n            date: new Date(),\n            value: d3.randomNormal(currentTemp, 0.2)()\n          });\n          kitchenData.shift();\n          this.setState({\n            kitchenData: kitchenData\n          });\n        }\n\n        if (roomName === \"Bedroom\") {\n          var bedroomData = this.state.bedroomData;\n          bedroomData.push({\n            date: new Date(),\n            value: d3.randomNormal(currentTemp, 0.2)()\n          });\n          bedroomData.shift();\n          this.setState({\n            bedroomData: bedroomData\n          });\n        }\n\n        if (roomName === \"Bathroom\") {\n          var bathroomData = this.state.bathroomData;\n          bathroomData.push({\n            date: new Date(),\n            value: d3.randomNormal(currentTemp, 0.2)()\n          });\n          bathroomData.shift();\n          this.setState({\n            bathroomData: bathroomData\n          });\n        }\n\n        if (roomName === \"Livingroom\") {\n          var livingroomData = this.state.livingroomData;\n          livingroomData.push({\n            date: new Date(),\n            value: d3.randomNormal(currentTemp, 0.2)()\n          });\n          livingroomData.shift();\n          this.setState({\n            livingroomData: livingroomData\n          });\n        }\n      }\n    }, 1000);\n    this.changeTempInterval = setInterval(() => {\n      if (currentTemp !== tempTarget) {\n        if (roomName === \"Kitchen\") {\n          console.log('wrong???');\n          currentTemp = Math.round((currentTemp + tempDiff / 10) * 10) / 10;\n          changeKitchenTemp(currentTemp);\n          console.log('currentTemp', currentTemp);\n          var kitchenData = this.state.kitchenData; // console.log('kitchenData',kitchenData)\n\n          kitchenData.push({\n            date: new Date(),\n            value: d3.randomNormal(currentTemp, 0.2)()\n          });\n          kitchenData.shift();\n          console.log('kitchenData', kitchenData);\n          this.setState({\n            kitchenData: kitchenData\n          });\n          console.log(\"this.state.kitchenData\", this.state.kitchenData);\n        }\n\n        if (roomName === \"Bedroom\") {\n          currentTemp = Math.round((currentTemp + tempDiff / 10) * 10) / 10;\n          changeBedroomTemp(currentTemp);\n          var bedroomData = this.state.bedroomData;\n          bedroomData.push({\n            date: new Date(),\n            value: d3.randomNormal(currentTemp, 0.2)()\n          });\n          bedroomData.shift();\n          this.setState({\n            bedroomData: bedroomData\n          });\n        }\n\n        if (roomName === \"Bathroom\") {\n          currentTemp = Math.round((currentTemp + tempDiff / 10) * 10) / 10;\n          changeBathroomTemp(currentTemp);\n          var bathroomData = this.state.bathroomData;\n          bathroomData.push({\n            date: new Date(),\n            value: d3.randomNormal(currentTemp, 0.2)()\n          });\n          bathroomData.shift();\n          this.setState({\n            bathroomData: bathroomData\n          });\n        }\n\n        if (roomName === \"Livingroom\") {\n          currentTemp = Math.round((currentTemp + tempDiff / 10) * 10) / 10;\n          changeLivingroomTemp(currentTemp);\n          var livingroomData = this.state.livingroomData;\n          livingroomData.push({\n            date: new Date(),\n            value: d3.randomNormal(currentTemp, 0.2)()\n          });\n          livingroomData.shift();\n          this.setState({\n            livingroomData: livingroomData\n          });\n        }\n\n        tempTarget = Math.round(tempTarget * 10) / 10;\n\n        if (currentTemp === tempTarget) {\n          clearInterval(this.changeTempInterval);\n        }\n      }\n    }, 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.changeTempInterval);\n    clearInterval(this.showTempInterval);\n  }\n\n  render() {\n    const _this$props3 = this.props,\n          roomName = _this$props3.roomName,\n          type = _this$props3.type;\n    const _this$state = this.state,\n          kitchenData = _this$state.kitchenData,\n          bedroomData = _this$state.bedroomData,\n          livingroomData = _this$state.livingroomData,\n          bathroomData = _this$state.bathroomData,\n          cooling = _this$state.cooling,\n          heating = _this$state.heating,\n          idle = _this$state.idle;\n\n    var data = function () {\n      if (roomName === \"Kitchen\") return kitchenData;\n      if (roomName === \"Livingroom\") return livingroomData;\n      if (roomName === \"Bedroom\") return bedroomData;\n      if (roomName === \"Bathroom\") return bathroomData;\n    }();\n\n    var Temperature = data[data.length - 1].value;\n    Temperature = Math.round(Temperature * 100) / 100;\n    return React.createElement(\"div\", {\n      className: \"room\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }, roomName), React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249\n      },\n      __self: this\n    }, \"Temperature: \", Temperature, \"\\xB0F \"), React.createElement(\"h6\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250\n      },\n      __self: this\n    }, \"Status:cooling\"), React.createElement(LineChart, {\n      type: type,\n      width: 600,\n      height: 400,\n      title: 'Current Temperature',\n      data: data,\n      range: [65, 90],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    kitchenTemperature: state.temperature.kitchenTemperature,\n    livingroomTemperature: state.temperature.livingroomTemperature,\n    bedroomTemperature: state.temperature.bedroomTemperature,\n    bathroomTemperature: state.temperature.bathroomTemperature,\n    livingroomCurrentTemp: state.temperature.livingroomCurrentTemp,\n    bedroomCurrentTemp: state.temperature.bedroomCurrentTemp,\n    bathroomCurrentTemp: state.temperature.bathroomCurrentTemp,\n    kitchenCurrentTemp: state.temperature.kitchenCurrentTemp,\n    livingroomStatus: state.temperature.livingroomStatus,\n    bedroomStatus: state.temperature.bedroomStatus,\n    bathroomStatus: state.temperature.bathroomStatus,\n    kitchenStatus: state.temperature.kitchenStatus,\n    livingroomTempData: state.temperature.livingroomTempData,\n    bedroomTempData: state.temperature.bedroomTempData,\n    bathroomTempData: state.temperature.bathroomTempData,\n    kitchenTempData: state.temperature.kitchenTempData\n  };\n};\n\nexport default connect(mapStateToProps, {\n  changeBathroomTemp,\n  changeLivingroomTemp,\n  changeKitchenTemp,\n  changeBedroomTemp,\n  setLivingroomStatus,\n  setKitchenStatus,\n  setBathroomStatus,\n  setBedroomStatus,\n  setLivingroomTempData,\n  setBedroomTempData,\n  setBathroomTempData,\n  setKitchenTempData\n})(Room);","map":{"version":3,"sources":["/Users/langgao/Documents/HiberSense Dashboard/hibersense-dash/src/components/Rooms/Room.js"],"names":["React","Component","LineChart","connect","makeData","d3","changeBathroomTemp","changeLivingroomTemp","changeKitchenTemp","changeBedroomTemp","setLivingroomStatus","setKitchenStatus","setBathroomStatus","setBedroomStatus","setLivingroomTempData","setBedroomTempData","setBathroomTempData","setKitchenTempData","Room","constructor","props","componentWillMount","kitchenCurrentTemp","bedroomCurrentTemp","bathroomCurrentTemp","livingroomCurrentTemp","componentDidMount","roomName","kitchenTemperature","livingroomTemperature","bathroomTemperature","bedroomTemperature","livingroomStatus","bedroomStatus","bathroomStatus","kitchenStatus","livingroomTempData","bedroomTempData","bathroomTempData","kitchenTempData","temp","tempTarget","currentTemp","temperature","tempDiff","setState","heating","cooling","idle","showTempInterval","setInterval","kitchenData","state","push","date","Date","value","randomNormal","shift","bedroomData","bathroomData","livingroomData","changeTempInterval","console","log","Math","round","clearInterval","componentWillUnmount","render","type","data","Temperature","length","mapStateToProps"],"mappings":"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","sourcesContent":["\nimport React, { Component } from 'react'\nimport LineChart from '../LineChart/LineChart';\nimport {connect} from 'react-redux';\nimport {makeData} from '../Utility/DataHandling';\nimport * as d3 from \"d3\";\nimport {\n  changeBathroomTemp,\n  changeLivingroomTemp,\n  changeKitchenTemp,\n  changeBedroomTemp,\n\n  setLivingroomStatus,\n  setKitchenStatus,\n  setBathroomStatus,\n  setBedroomStatus,\n\n  setLivingroomTempData,\n  setBedroomTempData,\n  setBathroomTempData,\n  setKitchenTempData,\n} from '../store/actions/temperatureSettingAction';\n\nclass Room extends Component {\n  constructor(props){\n    super();\n  }\n\n  componentWillMount(){\n    const {\n      kitchenCurrentTemp,\n      bedroomCurrentTemp,\n      bathroomCurrentTemp,\n      livingroomCurrentTemp,\n\n      setLivingroomTempData,\n      setBedroomTempData,\n      setBathroomTempData,\n      setKitchenTempData,\n    \n    } = this.props;\n    //prefill data\n    setLivingroomTempData(makeData(livingroomCurrentTemp,0.2));\n    setBedroomTempData(makeData(bedroomCurrentTemp,0.2));\n    setBathroomTempData(makeData(bathroomCurrentTemp,0.2));\n    setKitchenTempData(makeData(kitchenCurrentTemp,0.2));\n  }\n  \n  componentDidMount(){\n    const {\n      roomName, \n\n      kitchenTemperature,\n      livingroomTemperature,\n      bathroomTemperature,\n      bedroomTemperature,\n\n      kitchenCurrentTemp,\n      bedroomCurrentTemp,\n      bathroomCurrentTemp,\n      livingroomCurrentTemp,\n\n      livingroomStatus,\n      bedroomStatus,\n      bathroomStatus,\n      kitchenStatus,\n  \n      livingroomTempData,\n      bedroomTempData,\n      bathroomTempData,\n      kitchenTempData,\n\n\n      changeBathroomTemp, \n      changeLivingroomTemp,\n      changeKitchenTemp,\n      changeBedroomTemp,\n\n      setLivingroomStatus,\n      setKitchenStatus,\n      setBathroomStatus,\n      setBedroomStatus,\n\n      setLivingroomTempData,\n      setBedroomTempData,\n      setBathroomTempData,\n      setKitchenTempData,\n\n    \n    } = this.props;\n\n    const temp =(function(){\n      if(roomName===\"Kitchen\")  return {kitchenTemperature,kitchenCurrentTemp};\n      if(roomName===\"Livingroom\") return {livingroomTemperature,livingroomCurrentTemp};\n      if(roomName===\"Bedroom\") return {bedroomTemperature, bedroomCurrentTemp};\n      if(roomName===\"Bathroom\") return {bathroomTemperature, bathroomCurrentTemp};\n    })();\n\n    var {tempTarget, currentTemp} = temp;\n    tempTarget = typeof tempTarget === \"number\"? tempTarget: tempTarget.temperature;\n    currentTemp = typeof currentTemp === \"number\"? currentTemp: currentTemp.temperature;\n\n    const tempDiff = tempTarget - currentTemp;\n\n    //set room status: cooling/heating/idle\n    if(tempDiff>0){\n      this.setState({heating: true, cooling:false, idle:false})\n    }else if(tempDiff <0){\n      this.setState({heating: false, cooling:true,idle:false})\n    }else{\n      this.setState({heating: false, cooling:false,idle:true})\n    };\n\n\n    this.showTempInterval = setInterval(()=>{\n      if(currentTemp === tempTarget){\n        if(roomName===\"Kitchen\") {\n          var kitchenData = this.state.kitchenData;\n          kitchenData.push({date:new Date(),value:d3.randomNormal(currentTemp, 0.2)()});\n          kitchenData.shift();\n\n          this.setState({\n            kitchenData:kitchenData\n          })\n        }\n        if(roomName===\"Bedroom\") {\n          var bedroomData = this.state.bedroomData;\n          bedroomData.push({date:new Date(),value:d3.randomNormal(currentTemp, 0.2)()});\n          bedroomData.shift();\n\n          this.setState({\n            bedroomData:bedroomData\n          })\n        }\n\n        if(roomName===\"Bathroom\") {\n          var bathroomData = this.state.bathroomData;\n          bathroomData.push({date:new Date(),value:d3.randomNormal(currentTemp, 0.2)()});\n          bathroomData.shift();\n          \n          this.setState({\n            bathroomData:bathroomData\n          })\n        }\n        if(roomName===\"Livingroom\") {\n          var livingroomData = this.state.livingroomData;\n          livingroomData.push({date:new Date(),value:d3.randomNormal(currentTemp, 0.2)()});\n          livingroomData.shift();\n          \n          this.setState({\n            livingroomData:livingroomData\n          })\n        }\n\n      }},1000)\n\n    this.changeTempInterval = setInterval(()=>{\n      if(currentTemp!==tempTarget){\n        if(roomName===\"Kitchen\") {\n          console.log('wrong???')\n          currentTemp=Math.round((currentTemp+tempDiff/10)*10)/10;\n          changeKitchenTemp(currentTemp);\n          console.log('currentTemp',currentTemp)\n\n          var kitchenData = this.state.kitchenData;\n\n          // console.log('kitchenData',kitchenData)\n          kitchenData.push({date:new Date(),value:d3.randomNormal(currentTemp, 0.2)()});\n          kitchenData.shift();\n          console.log('kitchenData',kitchenData)\n          this.setState({\n            kitchenData:kitchenData\n          })\n          console.log(\"this.state.kitchenData\",this.state.kitchenData);\n        }\n        if(roomName===\"Bedroom\") {\n          currentTemp=Math.round((currentTemp+tempDiff/10)*10)/10;\n          changeBedroomTemp(currentTemp);\n          var bedroomData = this.state.bedroomData;\n          bedroomData.push({date:new Date(),value:d3.randomNormal(currentTemp, 0.2)()});\n          bedroomData.shift();\n          this.setState({\n            bedroomData:bedroomData\n          })\n        }\n        if(roomName===\"Bathroom\") {\n          currentTemp=Math.round((currentTemp+tempDiff/10)*10)/10;\n          changeBathroomTemp(currentTemp);\n          var bathroomData = this.state.bathroomData;\n          bathroomData.push({date:new Date(),value:d3.randomNormal(currentTemp, 0.2)()});\n          bathroomData.shift();\n          this.setState({\n            bathroomData:bathroomData\n          })\n        }\n        if(roomName===\"Livingroom\") {\n          currentTemp=Math.round((currentTemp+tempDiff/10)*10)/10;\n          changeLivingroomTemp(currentTemp);\n          var livingroomData = this.state.livingroomData;\n          livingroomData.push({date:new Date(),value:d3.randomNormal(currentTemp, 0.2)()});\n          livingroomData.shift();\n          this.setState({\n            livingroomData:livingroomData\n          })\n        }\n  \n        tempTarget = Math.round(tempTarget*10)/10;\n        \n        if(currentTemp === tempTarget){\n          clearInterval(this.changeTempInterval);\n        }\n      }\n    },1000)\n\n  }\n\n  componentWillUnmount(){\n    clearInterval(this.changeTempInterval);\n    clearInterval(this.showTempInterval);\n  }\n\n\n\n\n  render() {\n    const {roomName,type} =this.props;\n    const {\n      kitchenData,\n      bedroomData,\n      livingroomData,\n      bathroomData,\n      cooling,\n      heating,\n      idle\n    } = this.state;\n\n    \n    var data =(function(){\n      if(roomName===\"Kitchen\") return kitchenData;\n      if(roomName===\"Livingroom\") return livingroomData;\n      if(roomName===\"Bedroom\") return bedroomData;\n      if(roomName===\"Bathroom\")return bathroomData;\n    })();\n    var Temperature = data[data.length-1].value;\n    Temperature = Math.round(Temperature*100)/100;\n    return (\n      <div className='room'>\n          <h1>{roomName}</h1>\n          <h5>Temperature: {Temperature}°F </h5>\n          <h6>Status:cooling</h6>\n\n          <LineChart \n              type={type}\n              width={600} \n              height={400}\n              title={'Current Temperature'}\n              data = {data}\n              range={[65,90]}\n          />\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps=state=>{\n\n  return{\n    kitchenTemperature: state.temperature.kitchenTemperature,\n    livingroomTemperature: state.temperature.livingroomTemperature,\n    bedroomTemperature: state.temperature.bedroomTemperature,\n    bathroomTemperature: state.temperature.bathroomTemperature,\n\n    livingroomCurrentTemp:state.temperature.livingroomCurrentTemp,\n    bedroomCurrentTemp:state.temperature.bedroomCurrentTemp,\n    bathroomCurrentTemp:state.temperature.bathroomCurrentTemp,\n    kitchenCurrentTemp:state.temperature.kitchenCurrentTemp,\n\n    livingroomStatus:state.temperature.livingroomStatus,\n    bedroomStatus:state.temperature.bedroomStatus,\n    bathroomStatus:state.temperature.bathroomStatus,\n    kitchenStatus:state.temperature.kitchenStatus,\n\n    livingroomTempData:state.temperature.livingroomTempData,\n    bedroomTempData:state.temperature.bedroomTempData,\n    bathroomTempData:state.temperature.bathroomTempData,\n    kitchenTempData:state.temperature.kitchenTempData,\n\n  }\n}\n\nexport default connect(mapStateToProps, {\n  changeBathroomTemp, \n  changeLivingroomTemp,\n  changeKitchenTemp,\n  changeBedroomTemp,\n\n  setLivingroomStatus,\n  setKitchenStatus,\n  setBathroomStatus,\n  setBedroomStatus,\n\n  setLivingroomTempData,\n  setBedroomTempData,\n  setBathroomTempData,\n  setKitchenTempData,\n})(Room);\n"]},"metadata":{},"sourceType":"module"}