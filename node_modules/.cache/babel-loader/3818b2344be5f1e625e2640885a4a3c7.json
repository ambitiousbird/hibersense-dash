{"ast":null,"code":"var _jsxFileName = \"/Users/langgao/Documents/HiberSense Dashboard/hibersense-dash/src/components/Summary/Summary.js\";\nimport React, { Component } from 'react';\nimport LineChart from '../LineChart/LineChart';\nimport DonutChart from '../DonutChart/DonutChart';\nimport { makeData } from '../Utility/DataHandling';\nimport './summary.css';\nimport { SettingsAlert } from '../Utility/Alert';\nimport { connect } from 'react-redux';\nimport Room from '../Rooms/Room';\n\nclass Summary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: {},\n      showWarning: false,\n      kitchenUsuage: 0.67,\n      bedroomUsuage: 2.22,\n      bathroomUsuage: 0.44,\n      livingroomUsuage: 1.67\n    };\n  }\n\n  componentWillMount() {\n    this.setState({\n      data: makeData(5, 0.2)\n    }); // this.loadData = setInterval(() => {\n    //   const data = makeData(1.5,0.2);\n    //   this.setState({\n    //     data:data\n    //   })\n    // }, 1000);\n  }\n\n  componentDidMount() {\n    const _this$props = this.props,\n          kitchenTemperature = _this$props.kitchenTemperature,\n          livingroomTemperature = _this$props.livingroomTemperature,\n          bathroomTemperature = _this$props.bathroomTemperature,\n          bedroomTemperature = _this$props.bedroomTemperature,\n          kitchenCurrentTemp = _this$props.kitchenCurrentTemp,\n          bedroomCurrentTemp = _this$props.bedroomCurrentTemp,\n          bathroomCurrentTemp = _this$props.bathroomCurrentTemp,\n          livingroomCurrentTemp = _this$props.livingroomCurrentTemp;\n    const _this$state = this.state,\n          kitchenUsuage = _this$state.kitchenUsuage,\n          bedroomUsuage = _this$state.bedroomUsuage,\n          bathroomUsuage = _this$state.bathroomUsuage,\n          livingroomUsuage = _this$state.livingroomUsuage;\n\n    const updateTemp = (tempTarget, currentTemp) => {\n      return {\n        temp1: typeof tempTarget === \"number\" ? tempTarget : tempTarget.temperature,\n        temp2: typeof currentTemp === \"number\" ? currentTemp : currentTemp.temperature\n      };\n    };\n\n    console.log(\"checking...\", parseInt(updateTemp(kitchenTemperature, kitchenCurrentTemp).temp1));\n    var count = 1;\n    var totalUsuage = kitchenUsuage + bedroomUsuage + bathroomUsuage + livingroomUsuage;\n    this.updateUsuageInterval = setInterval(() => {\n      var kitchenTemp = updateTemp(kitchenTemperature, kitchenCurrentTemp);\n      var bedroomTemp = updateTemp(bedroomTemperature, bedroomCurrentTemp);\n      var bathroomTemp = updateTemp(bathroomTemperature, bathroomCurrentTemp);\n      var livingroomTemp = updateTemp(livingroomTemperature, livingroomCurrentTemp);\n      var needUpdate = kitchenTemp.temp1 + bedroomTemp.temp1 + bathroomTemp.temp1 + livingroomTemp.temp1 !== kitchenTemp.temp2 + bedroomTemp.temp2 + bathroomTemp.temp2 + livingroomTemp.temp2;\n      console.log(\"needupdate?\", needUpdate);\n\n      if (needUpdate) {\n        count++;\n        if (parseInt(kitchenTemp.temp1) !== kitchenTemp.temp2) this.setState({\n          kitchenUsuage: 2 * 0.67\n        });\n        if (parseInt(bedroomTemp.temp1) !== bedroomTemp.temp2) this.setState({\n          bedroomUsuage: 2 * 2.22\n        });\n        if (parseInt(bathroomTemp.temp1) !== bathroomTemp.temp2) this.setState({\n          bathroomUsuage: 2 * 0.44\n        });\n        if (parseInt(livingroomTemp.temp1) !== livingroomTemp.temp2) this.setState({\n          livingroomUsuage: 2 * 1.67\n        });\n        console.log(\"count\", count);\n\n        if (count === 10) {\n          this.setState({\n            kitchenUsuage: 0.67,\n            bedroomUsuage: 2.22,\n            bathroomUsuage: 0.44,\n            livingroomUsuage: 1.67\n          });\n          clearInterval(this.updateUsuageInterval);\n        }\n      } else {\n        clearInterval(this.updateUsuageInterval);\n      }\n    }, 1000);\n    console.log(\"totalUsuage\", totalUsuage);\n    this.setState({\n      data: makeData(totalUsuage, 0.2)\n    });\n    this.showUsuageInterval = setInterval(() => {\n      console.log(\"total usage checking 1\", totalUsuage);\n      this.setState({\n        data: makeData(totalUsuage, 0.2)\n      });\n    }, 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.updateUsuageInterval);\n    clearInterval(this.showUsuageInterval);\n  }\n\n  render() {\n    // const test = this.state.data\n    // console.log(test[test.length-1].value);\n    console.log(this.state.data);\n    const totalUsuage = this.state.bathroomUsuage + this.state.bedroomUsuage + this.state.kitchenUsuage + this.state.livingroomUsuage;\n    console.log(\"total usage checking 2\", totalUsuage);\n    const data = makeData(totalUsuage, 0.2);\n    return React.createElement(\"div\", {\n      id: \"summary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, React.createElement(SettingsAlert, {\n      showWarning: this.state.showWarning,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"charts\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"line-chart\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, React.createElement(LineChart, {\n      width: 800,\n      height: 400,\n      data: data,\n      range: [2, 10],\n      title: 'Overall Energy Consumption',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      id: \"donut-chart\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, React.createElement(DonutChart, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      id: \"status-summary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      className: \"headline\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, \"Temperature Status\"), React.createElement(Room, {\n      roomName: \"Kitchen\",\n      type: \"temperature\",\n      showChart: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }), React.createElement(Room, {\n      roomName: \"Bedroom\",\n      type: \"temperature\",\n      showChart: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }), React.createElement(Room, {\n      roomName: \"Livingroom\",\n      type: \"temperature\",\n      showChart: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }), React.createElement(Room, {\n      roomName: \"Bathroom\",\n      type: \"temperature\",\n      showChart: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    })));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    kitchenTemperature: state.temperature.kitchenTemperature,\n    livingroomTemperature: state.temperature.livingroomTemperature,\n    bedroomTemperature: state.temperature.bedroomTemperature,\n    bathroomTemperature: state.temperature.bathroomTemperature,\n    livingroomCurrentTemp: state.temperature.livingroomCurrentTemp,\n    bedroomCurrentTemp: state.temperature.bedroomCurrentTemp,\n    bathroomCurrentTemp: state.temperature.bathroomCurrentTemp,\n    kitchenCurrentTemp: state.temperature.kitchenCurrentTemp\n  };\n};\n\nexport default connect(mapStateToProps)(Summary);","map":{"version":3,"sources":["/Users/langgao/Documents/HiberSense Dashboard/hibersense-dash/src/components/Summary/Summary.js"],"names":["React","Component","LineChart","DonutChart","makeData","SettingsAlert","connect","Room","Summary","constructor","props","state","data","showWarning","kitchenUsuage","bedroomUsuage","bathroomUsuage","livingroomUsuage","componentWillMount","setState","componentDidMount","kitchenTemperature","livingroomTemperature","bathroomTemperature","bedroomTemperature","kitchenCurrentTemp","bedroomCurrentTemp","bathroomCurrentTemp","livingroomCurrentTemp","updateTemp","tempTarget","currentTemp","temp1","temperature","temp2","console","log","parseInt","count","totalUsuage","updateUsuageInterval","setInterval","kitchenTemp","bedroomTemp","bathroomTemp","livingroomTemp","needUpdate","clearInterval","showUsuageInterval","componentWillUnmount","render","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport LineChart from '../LineChart/LineChart';\nimport DonutChart from '../DonutChart/DonutChart';\nimport {makeData} from '../Utility/DataHandling';\nimport './summary.css';\nimport {SettingsAlert} from '../Utility/Alert';\nimport { connect } from 'react-redux';\nimport Room from '../Rooms/Room';\n\n\nclass Summary extends Component {\n  constructor(props){\n    super(props);\n    this.state={\n      data:{},\n      showWarning:false,\n      kitchenUsuage:0.67,\n      bedroomUsuage:2.22,\n      bathroomUsuage:0.44,\n      livingroomUsuage:1.67\n    }\n  }\n\n\n  componentWillMount(){\n    this.setState({\n      data:makeData(5,0.2)\n    })\n\n    // this.loadData = setInterval(() => {\n    //   const data = makeData(1.5,0.2);\n    //   this.setState({\n    //     data:data\n    //   })\n    // }, 1000);\n  }\n\n  componentDidMount(){\n    const {\n\n      kitchenTemperature,\n      livingroomTemperature,\n      bathroomTemperature,\n      bedroomTemperature,\n\n      kitchenCurrentTemp,\n      bedroomCurrentTemp,\n      bathroomCurrentTemp,\n      livingroomCurrentTemp,  \n    } = this.props;\n\n    const{kitchenUsuage,\n      bedroomUsuage,\n      bathroomUsuage,\n      livingroomUsuage} = this.state;\n\n    const updateTemp =(tempTarget,currentTemp)=>{\n      return{\n        temp1: typeof tempTarget === \"number\"? tempTarget: tempTarget.temperature,\n        temp2: typeof currentTemp === \"number\"? currentTemp: currentTemp.temperature\n      }\n    }\n\n    console.log(\"checking...\",parseInt(updateTemp(kitchenTemperature,kitchenCurrentTemp).temp1));\n    var count=1\n    var totalUsuage = kitchenUsuage+bedroomUsuage+bathroomUsuage+livingroomUsuage;\n    this.updateUsuageInterval = setInterval(()=>{\n      var kitchenTemp = updateTemp(kitchenTemperature,kitchenCurrentTemp);\n      var bedroomTemp = updateTemp(bedroomTemperature,bedroomCurrentTemp);\n      var bathroomTemp = updateTemp(bathroomTemperature,bathroomCurrentTemp);\n      var livingroomTemp = updateTemp(livingroomTemperature,livingroomCurrentTemp);\n      var needUpdate = (kitchenTemp.temp1+bedroomTemp.temp1+bathroomTemp.temp1+livingroomTemp.temp1)!==\n                        (kitchenTemp.temp2+bedroomTemp.temp2+bathroomTemp.temp2+livingroomTemp.temp2)\n\n      console.log(\"needupdate?\", needUpdate)\n      if(needUpdate){\n          count++;\n          if(parseInt(kitchenTemp.temp1)!==kitchenTemp.temp2) this.setState({kitchenUsuage:2*0.67})\n          if(parseInt(bedroomTemp.temp1)!==bedroomTemp.temp2) this.setState({bedroomUsuage:2*2.22})\n          if(parseInt(bathroomTemp.temp1)!==bathroomTemp.temp2) this.setState({bathroomUsuage:2*0.44})\n          if(parseInt(livingroomTemp.temp1)!==livingroomTemp.temp2) this.setState({livingroomUsuage:2*1.67})\n\n          console.log(\"count\",count)      \n          if(count === 10){\n            this.setState({\n              kitchenUsuage:0.67,\n              bedroomUsuage:2.22,\n              bathroomUsuage:0.44,\n              livingroomUsuage:1.67\n            })\n            clearInterval(this.updateUsuageInterval);\n          }\n      }else{\n        clearInterval(this.updateUsuageInterval);\n      } \n\n    },1000)\n\n    console.log(\"totalUsuage\",totalUsuage)\n    \n    this.setState({\n      data:makeData(totalUsuage,0.2)\n    })\n\n    this.showUsuageInterval=setInterval(\n      ()=>{\n        console.log(\"total usage checking 1\",totalUsuage)\n        this.setState({\n          data:makeData(totalUsuage,0.2)\n        })\n      },1000\n    )\n\n  }\n\n  componentWillUnmount(){\n    clearInterval(this.updateUsuageInterval);\n    clearInterval(this.showUsuageInterval);\n  }\n\n\n  render() {\n    // const test = this.state.data\n    // console.log(test[test.length-1].value);\n    console.log(this.state.data)\n    const totalUsuage = this.state.bathroomUsuage+this.state.bedroomUsuage+this.state.kitchenUsuage+this.state.livingroomUsuage;\n    console.log(\"total usage checking 2\",totalUsuage)\n    const data = makeData(totalUsuage,0.2)\n    return (\n      <div id='summary'>\n            <SettingsAlert showWarning={this.state.showWarning}/>\n            <div id='charts'>\n              <div id=\"line-chart\">\n                <LineChart\n                    width={800} \n                    height={400}\n                    data = {data}\n                    range={[2,10]}\n                    title={'Overall Energy Consumption'}\n                />\n              </div>\n              <div id='donut-chart'><DonutChart /></div>\n            </div>\n\n          <div id=\"status-summary\">\n            <h2 className='headline'>Temperature Status</h2>\n            <Room roomName={\"Kitchen\"} type=\"temperature\" showChart={false}/>\n            <Room roomName={\"Bedroom\"} type=\"temperature\" showChart={false}/>\n            <Room roomName={\"Livingroom\"} type=\"temperature\" showChart={false}/>\n            <Room roomName={\"Bathroom\"} type=\"temperature\" showChart={false}/>\n          </div>\n\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps=state=>{\n  return{\n    kitchenTemperature: state.temperature.kitchenTemperature,\n    livingroomTemperature: state.temperature.livingroomTemperature,\n    bedroomTemperature: state.temperature.bedroomTemperature,\n    bathroomTemperature: state.temperature.bathroomTemperature,\n\n    livingroomCurrentTemp:state.temperature.livingroomCurrentTemp,\n    bedroomCurrentTemp:state.temperature.bedroomCurrentTemp,\n    bathroomCurrentTemp:state.temperature.bathroomCurrentTemp,\n    kitchenCurrentTemp:state.temperature.kitchenCurrentTemp,\n  }\n}\n\nexport default connect(mapStateToProps)(Summary);"]},"metadata":{},"sourceType":"module"}