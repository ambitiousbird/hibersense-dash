{"ast":null,"code":"var _jsxFileName = \"/Users/langgao/Documents/HiberSense Dashboard/hibersense-dash/src/components/Rooms/Room.js\";\nimport React, { Component } from 'react';\nimport LineChart from '../LineChart/LineChart';\nimport { connect } from 'react-redux';\nimport { makeData } from '../Utility/DataHandling';\nimport * as d3 from \"d3\";\nimport { changeBathroomTemp, changeLivingroomTemp, changeKitchenTemp, changeBedroomTemp, setLivingroomStatus, setKitchenStatus, setBathroomStatus, setBedroomStatus, setLivingroomTempData, setBedroomTempData, setBathroomTempData, setKitchenTempData } from '../store/actions/temperatureSettingAction';\n\nclass Room extends Component {\n  constructor(props) {\n    super();\n  }\n\n  componentWillMount() {\n    const _this$props = this.props,\n          kitchenCurrentTemp = _this$props.kitchenCurrentTemp,\n          bedroomCurrentTemp = _this$props.bedroomCurrentTemp,\n          bathroomCurrentTemp = _this$props.bathroomCurrentTemp,\n          livingroomCurrentTemp = _this$props.livingroomCurrentTemp,\n          setLivingroomTempData = _this$props.setLivingroomTempData,\n          setBedroomTempData = _this$props.setBedroomTempData,\n          setBathroomTempData = _this$props.setBathroomTempData,\n          setKitchenTempData = _this$props.setKitchenTempData; //prefill data\n\n    setLivingroomTempData(makeData(livingroomCurrentTemp, 0.2));\n    setBedroomTempData(makeData(bedroomCurrentTemp, 0.2));\n    setBathroomTempData(makeData(bathroomCurrentTemp, 0.2));\n    setKitchenTempData(makeData(kitchenCurrentTemp, 0.2));\n  }\n\n  componentDidMount() {\n    const _this$props2 = this.props,\n          roomName = _this$props2.roomName,\n          kitchenTemperature = _this$props2.kitchenTemperature,\n          livingroomTemperature = _this$props2.livingroomTemperature,\n          bathroomTemperature = _this$props2.bathroomTemperature,\n          bedroomTemperature = _this$props2.bedroomTemperature,\n          kitchenCurrentTemp = _this$props2.kitchenCurrentTemp,\n          bedroomCurrentTemp = _this$props2.bedroomCurrentTemp,\n          bathroomCurrentTemp = _this$props2.bathroomCurrentTemp,\n          livingroomCurrentTemp = _this$props2.livingroomCurrentTemp,\n          livingroomTempData = _this$props2.livingroomTempData,\n          bedroomTempData = _this$props2.bedroomTempData,\n          bathroomTempData = _this$props2.bathroomTempData,\n          kitchenTempData = _this$props2.kitchenTempData,\n          changeBathroomTemp = _this$props2.changeBathroomTemp,\n          changeLivingroomTemp = _this$props2.changeLivingroomTemp,\n          changeKitchenTemp = _this$props2.changeKitchenTemp,\n          changeBedroomTemp = _this$props2.changeBedroomTemp,\n          setLivingroomStatus = _this$props2.setLivingroomStatus,\n          setKitchenStatus = _this$props2.setKitchenStatus,\n          setBathroomStatus = _this$props2.setBathroomStatus,\n          setBedroomStatus = _this$props2.setBedroomStatus,\n          setLivingroomTempData = _this$props2.setLivingroomTempData,\n          setBedroomTempData = _this$props2.setBedroomTempData,\n          setBathroomTempData = _this$props2.setBathroomTempData,\n          setKitchenTempData = _this$props2.setKitchenTempData;\n\n    const temp = function () {\n      if (roomName === \"Kitchen\") return {\n        kitchenTemperature,\n        kitchenCurrentTemp\n      };\n      if (roomName === \"Livingroom\") return {\n        livingroomTemperature,\n        livingroomCurrentTemp\n      };\n      if (roomName === \"Bedroom\") return {\n        bedroomTemperature,\n        bedroomCurrentTemp\n      };\n      if (roomName === \"Bathroom\") return {\n        bathroomTemperature,\n        bathroomCurrentTemp\n      };\n    }();\n\n    var tempTarget = temp.tempTarget,\n        currentTemp = temp.currentTemp;\n    tempTarget = typeof tempTarget === \"number\" ? tempTarget : tempTarget.temperature;\n    currentTemp = typeof currentTemp === \"number\" ? currentTemp : currentTemp.temperature;\n    const tempDiff = tempTarget - currentTemp; //set room status: cooling/heating/idle\n\n    const setStatus = setRoomStatus => {\n      if (tempDiff > 0) {\n        setRoomStatus(\"heating\");\n      } else if (tempDiff < 0) {\n        setRoomStatus(\"cooling\");\n      } else {\n        setRoomStatus(\"idle\");\n      }\n\n      ;\n    };\n\n    if (roomName === \"Kitchen\") setStatus(setKitchenStatus);\n    if (roomName === \"Bedroom\") setStatus(setBedroomStatus);\n    if (roomName === \"Livingroom\") setStatus(setLivingroomStatus);\n    if (roomName === \"Bathroom\") setStatus(setBathroomStatus);\n    this.showTempInterval = setInterval(() => {\n      if (currentTemp === tempTarget) {\n        if (roomName === \"Kitchen\") {\n          var kitchenData = kitchenTempData;\n          kitchenData.push({\n            date: new Date(),\n            value: d3.randomNormal(currentTemp, 0.2)()\n          });\n          kitchenData.shift();\n          setKitchenTempData(kitchenData);\n        }\n\n        if (roomName === \"Bedroom\") {\n          var bedroomData = bedroomTempData;\n          bedroomData.push({\n            date: new Date(),\n            value: d3.randomNormal(currentTemp, 0.2)()\n          });\n          bedroomData.shift();\n          setBedroomTempData(bedroomData);\n        }\n\n        if (roomName === \"Bathroom\") {\n          var bathroomData = bathroomTempData;\n          bathroomData.push({\n            date: new Date(),\n            value: d3.randomNormal(currentTemp, 0.2)()\n          });\n          bathroomData.shift();\n          setBathroomTempData(bathroomData);\n        }\n\n        if (roomName === \"Livingroom\") {\n          var livingroomData = livingroomTempData;\n          livingroomData.push({\n            date: new Date(),\n            value: d3.randomNormal(currentTemp, 0.2)()\n          });\n          livingroomData.shift();\n          setLivingroomTempData(livingroomData);\n        }\n      }\n    }, 1000);\n    this.changeTempInterval = setInterval(() => {\n      if (currentTemp !== tempTarget) {\n        if (roomName === \"Kitchen\") {\n          currentTemp = Math.round((currentTemp + tempDiff / 10) * 10) / 10;\n          changeKitchenTemp(currentTemp);\n          var kitchenData = kitchenTempData;\n          kitchenData.push({\n            date: new Date(),\n            value: d3.randomNormal(currentTemp, 0.2)()\n          });\n          kitchenData.shift();\n          setKitchenTempData(kitchenData);\n        }\n\n        if (roomName === \"Bedroom\") {\n          currentTemp = Math.round((currentTemp + tempDiff / 10) * 10) / 10;\n          changeBedroomTemp(currentTemp);\n          var bedroomData = bedroomTempData;\n          bedroomData.push({\n            date: new Date(),\n            value: d3.randomNormal(currentTemp, 0.2)()\n          });\n          bedroomData.shift();\n          setBedroomTempData(bedroomData);\n        }\n\n        if (roomName === \"Bathroom\") {\n          currentTemp = Math.round((currentTemp + tempDiff / 10) * 10) / 10;\n          changeBathroomTemp(currentTemp);\n          var bathroomData = bathroomTempData;\n          bathroomData.push({\n            date: new Date(),\n            value: d3.randomNormal(currentTemp, 0.2)()\n          });\n          bathroomData.shift();\n          setBathroomTempData(bathroomData);\n        }\n\n        if (roomName === \"Livingroom\") {\n          currentTemp = Math.round((currentTemp + tempDiff / 10) * 10) / 10;\n          changeLivingroomTemp(currentTemp);\n          var livingroomData = livingroomTempData;\n          livingroomData.push({\n            date: new Date(),\n            value: d3.randomNormal(currentTemp, 0.2)()\n          });\n          livingroomData.shift();\n          setLivingroomTempData(livingroomData);\n        }\n\n        tempTarget = Math.round(tempTarget * 10) / 10;\n\n        if (currentTemp === tempTarget) {\n          clearInterval(this.changeTempInterval);\n        }\n      }\n    }, 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.changeTempInterval);\n    clearInterval(this.showTempInterval);\n  }\n\n  render() {\n    const _this$props3 = this.props,\n          roomName = _this$props3.roomName,\n          type = _this$props3.type,\n          kitchenTempData = _this$props3.kitchenTempData,\n          bedroomTempData = _this$props3.bedroomTempData,\n          livingroomTempData = _this$props3.livingroomTempData,\n          bathroomTempData = _this$props3.bathroomTempData;\n\n    var data = function () {\n      if (roomName === \"Kitchen\") return kitchenTempData;\n      if (roomName === \"Livingroom\") return livingroomTempData;\n      if (roomName === \"Bedroom\") return bedroomTempData;\n      if (roomName === \"Bathroom\") return bathroomTempData;\n    }();\n\n    var Temperature = data[data.length - 1].value;\n    Temperature = Math.round(Temperature * 100) / 100;\n    return React.createElement(\"div\", {\n      className: \"room\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }, roomName), React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }, \"Temperature: \", Temperature, \"\\xB0F \"), React.createElement(\"h6\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }, \"Status:cooling\"), React.createElement(LineChart, {\n      type: type,\n      width: 600,\n      height: 400,\n      title: 'Current Temperature',\n      data: data,\n      range: [65, 90],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    kitchenTemperature: state.temperature.kitchenTemperature,\n    livingroomTemperature: state.temperature.livingroomTemperature,\n    bedroomTemperature: state.temperature.bedroomTemperature,\n    bathroomTemperature: state.temperature.bathroomTemperature,\n    livingroomCurrentTemp: state.temperature.livingroomCurrentTemp,\n    bedroomCurrentTemp: state.temperature.bedroomCurrentTemp,\n    bathroomCurrentTemp: state.temperature.bathroomCurrentTemp,\n    kitchenCurrentTemp: state.temperature.kitchenCurrentTemp,\n    livingroomStatus: state.temperature.livingroomStatus,\n    bedroomStatus: state.temperature.bedroomStatus,\n    bathroomStatus: state.temperature.bathroomStatus,\n    kitchenStatus: state.temperature.kitchenStatus,\n    livingroomTempData: state.temperature.livingroomTempData,\n    bedroomTempData: state.temperature.bedroomTempData,\n    bathroomTempData: state.temperature.bathroomTempData,\n    kitchenTempData: state.temperature.kitchenTempData\n  };\n};\n\nexport default connect(mapStateToProps, {\n  changeBathroomTemp,\n  changeLivingroomTemp,\n  changeKitchenTemp,\n  changeBedroomTemp,\n  setLivingroomStatus,\n  setKitchenStatus,\n  setBathroomStatus,\n  setBedroomStatus,\n  setLivingroomTempData,\n  setBedroomTempData,\n  setBathroomTempData,\n  setKitchenTempData\n})(Room);","map":{"version":3,"sources":["/Users/langgao/Documents/HiberSense Dashboard/hibersense-dash/src/components/Rooms/Room.js"],"names":["React","Component","LineChart","connect","makeData","d3","changeBathroomTemp","changeLivingroomTemp","changeKitchenTemp","changeBedroomTemp","setLivingroomStatus","setKitchenStatus","setBathroomStatus","setBedroomStatus","setLivingroomTempData","setBedroomTempData","setBathroomTempData","setKitchenTempData","Room","constructor","props","componentWillMount","kitchenCurrentTemp","bedroomCurrentTemp","bathroomCurrentTemp","livingroomCurrentTemp","componentDidMount","roomName","kitchenTemperature","livingroomTemperature","bathroomTemperature","bedroomTemperature","livingroomTempData","bedroomTempData","bathroomTempData","kitchenTempData","temp","tempTarget","currentTemp","temperature","tempDiff","setStatus","setRoomStatus","showTempInterval","setInterval","kitchenData","push","date","Date","value","randomNormal","shift","bedroomData","bathroomData","livingroomData","changeTempInterval","Math","round","clearInterval","componentWillUnmount","render","type","data","Temperature","length","mapStateToProps","state","livingroomStatus","bedroomStatus","bathroomStatus","kitchenStatus"],"mappings":"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","sourcesContent":["\nimport React, { Component } from 'react'\nimport LineChart from '../LineChart/LineChart';\nimport {connect} from 'react-redux';\nimport {makeData} from '../Utility/DataHandling';\nimport * as d3 from \"d3\";\nimport {\n  changeBathroomTemp,\n  changeLivingroomTemp,\n  changeKitchenTemp,\n  changeBedroomTemp,\n\n  setLivingroomStatus,\n  setKitchenStatus,\n  setBathroomStatus,\n  setBedroomStatus,\n\n  setLivingroomTempData,\n  setBedroomTempData,\n  setBathroomTempData,\n  setKitchenTempData,\n} from '../store/actions/temperatureSettingAction';\n\nclass Room extends Component {\n  constructor(props){\n    super();\n  }\n\n  componentWillMount(){\n    const {\n      kitchenCurrentTemp,\n      bedroomCurrentTemp,\n      bathroomCurrentTemp,\n      livingroomCurrentTemp,\n\n      setLivingroomTempData,\n      setBedroomTempData,\n      setBathroomTempData,\n      setKitchenTempData,\n    \n    } = this.props;\n    //prefill data\n    setLivingroomTempData(makeData(livingroomCurrentTemp,0.2));\n    setBedroomTempData(makeData(bedroomCurrentTemp,0.2));\n    setBathroomTempData(makeData(bathroomCurrentTemp,0.2));\n    setKitchenTempData(makeData(kitchenCurrentTemp,0.2));\n  }\n  \n  componentDidMount(){\n    const {\n      roomName, \n\n      kitchenTemperature,\n      livingroomTemperature,\n      bathroomTemperature,\n      bedroomTemperature,\n\n      kitchenCurrentTemp,\n      bedroomCurrentTemp,\n      bathroomCurrentTemp,\n      livingroomCurrentTemp,\n  \n      livingroomTempData,\n      bedroomTempData,\n      bathroomTempData,\n      kitchenTempData,\n\n\n      changeBathroomTemp, \n      changeLivingroomTemp,\n      changeKitchenTemp,\n      changeBedroomTemp,\n\n      setLivingroomStatus,\n      setKitchenStatus,\n      setBathroomStatus,\n      setBedroomStatus,\n\n      setLivingroomTempData,\n      setBedroomTempData,\n      setBathroomTempData,\n      setKitchenTempData,\n\n    \n    } = this.props;\n\n    const temp =(function(){\n      if(roomName===\"Kitchen\")  return {kitchenTemperature,kitchenCurrentTemp};\n      if(roomName===\"Livingroom\") return {livingroomTemperature,livingroomCurrentTemp};\n      if(roomName===\"Bedroom\") return {bedroomTemperature, bedroomCurrentTemp};\n      if(roomName===\"Bathroom\") return {bathroomTemperature, bathroomCurrentTemp};\n    })();\n\n    var {tempTarget, currentTemp} = temp;\n    tempTarget = typeof tempTarget === \"number\"? tempTarget: tempTarget.temperature;\n    currentTemp = typeof currentTemp === \"number\"? currentTemp: currentTemp.temperature;\n\n    const tempDiff = tempTarget - currentTemp;\n\n    //set room status: cooling/heating/idle\n    const setStatus=setRoomStatus=>{\n      if(tempDiff>0){\n        setRoomStatus(\"heating\");\n      }else if(tempDiff <0){\n        setRoomStatus(\"cooling\");\n      }else{\n        setRoomStatus(\"idle\")\n      };\n    }\n\n    if(roomName===\"Kitchen\") setStatus(setKitchenStatus);\n    if(roomName===\"Bedroom\") setStatus(setBedroomStatus);\n    if(roomName===\"Livingroom\") setStatus(setLivingroomStatus);\n    if(roomName===\"Bathroom\") setStatus(setBathroomStatus);\n\n    this.showTempInterval = setInterval(()=>{\n      if(currentTemp === tempTarget){\n        if(roomName===\"Kitchen\") {\n          var kitchenData = kitchenTempData;\n          kitchenData.push({date:new Date(),value:d3.randomNormal(currentTemp, 0.2)()});\n          kitchenData.shift();\n          setKitchenTempData(kitchenData);\n        }\n        if(roomName===\"Bedroom\") {\n          var bedroomData = bedroomTempData;\n          bedroomData.push({date:new Date(),value:d3.randomNormal(currentTemp, 0.2)()});\n          bedroomData.shift();\n          setBedroomTempData(bedroomData);\n        }\n        if(roomName===\"Bathroom\") {\n          var bathroomData = bathroomTempData;\n          bathroomData.push({date:new Date(),value:d3.randomNormal(currentTemp, 0.2)()});\n          bathroomData.shift();\n          setBathroomTempData(bathroomData);\n        }\n        if(roomName===\"Livingroom\") {\n          var livingroomData = livingroomTempData;\n          livingroomData.push({date:new Date(),value:d3.randomNormal(currentTemp, 0.2)()});\n          livingroomData.shift();\n          setLivingroomTempData(livingroomData);\n        }\n      }},1000)\n\n    this.changeTempInterval = setInterval(()=>{\n      if(currentTemp!==tempTarget){\n        if(roomName===\"Kitchen\") {\n          currentTemp=Math.round((currentTemp+tempDiff/10)*10)/10;\n          changeKitchenTemp(currentTemp);\n          var kitchenData = kitchenTempData;\n\n          kitchenData.push({date:new Date(),value:d3.randomNormal(currentTemp, 0.2)()});\n          kitchenData.shift();\n          setKitchenTempData(kitchenData);\n        }\n        if(roomName===\"Bedroom\") {\n          currentTemp=Math.round((currentTemp+tempDiff/10)*10)/10;\n          changeBedroomTemp(currentTemp);\n\n          var bedroomData = bedroomTempData;\n          bedroomData.push({date:new Date(),value:d3.randomNormal(currentTemp, 0.2)()});\n          bedroomData.shift();\n          setBedroomTempData(bedroomData);\n        }\n        if(roomName===\"Bathroom\") {\n          currentTemp=Math.round((currentTemp+tempDiff/10)*10)/10;\n          changeBathroomTemp(currentTemp);\n          var bathroomData = bathroomTempData;\n          bathroomData.push({date:new Date(),value:d3.randomNormal(currentTemp, 0.2)()});\n          bathroomData.shift();\n          setBathroomTempData(bathroomData);\n        }\n        if(roomName===\"Livingroom\") {\n          currentTemp=Math.round((currentTemp+tempDiff/10)*10)/10;\n          changeLivingroomTemp(currentTemp);\n          var livingroomData = livingroomTempData;\n          livingroomData.push({date:new Date(),value:d3.randomNormal(currentTemp, 0.2)()});\n          livingroomData.shift();\n          setLivingroomTempData(livingroomData);\n        }\n  \n        tempTarget = Math.round(tempTarget*10)/10;\n        \n        if(currentTemp === tempTarget){\n          clearInterval(this.changeTempInterval);\n        }\n      }\n    },1000)\n  }\n\n  componentWillUnmount(){\n    clearInterval(this.changeTempInterval);\n    clearInterval(this.showTempInterval);\n  }\n\n\n\n\n  render() {\n    const {\n      roomName,\n      type,\n      kitchenTempData,\n      bedroomTempData,\n      livingroomTempData,\n      bathroomTempData\n    } =this.props;\n\n    var data =(function(){\n      if(roomName===\"Kitchen\") return kitchenTempData;\n      if(roomName===\"Livingroom\") return livingroomTempData;\n      if(roomName===\"Bedroom\") return bedroomTempData;\n      if(roomName===\"Bathroom\")return bathroomTempData;\n    })();\n\n\n    var Temperature = data[data.length-1].value;\n    Temperature = Math.round(Temperature*100)/100;\n    return (\n      <div className='room'>\n          <h1>{roomName}</h1>\n          <h5>Temperature: {Temperature}°F </h5>\n          <h6>Status:cooling</h6>\n\n          <LineChart \n              type={type}\n              width={600} \n              height={400}\n              title={'Current Temperature'}\n              data = {data}\n              range={[65,90]}\n          />\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps=state=>{\n\n  return{\n    kitchenTemperature: state.temperature.kitchenTemperature,\n    livingroomTemperature: state.temperature.livingroomTemperature,\n    bedroomTemperature: state.temperature.bedroomTemperature,\n    bathroomTemperature: state.temperature.bathroomTemperature,\n\n    livingroomCurrentTemp:state.temperature.livingroomCurrentTemp,\n    bedroomCurrentTemp:state.temperature.bedroomCurrentTemp,\n    bathroomCurrentTemp:state.temperature.bathroomCurrentTemp,\n    kitchenCurrentTemp:state.temperature.kitchenCurrentTemp,\n\n    livingroomStatus:state.temperature.livingroomStatus,\n    bedroomStatus:state.temperature.bedroomStatus,\n    bathroomStatus:state.temperature.bathroomStatus,\n    kitchenStatus:state.temperature.kitchenStatus,\n\n    livingroomTempData:state.temperature.livingroomTempData,\n    bedroomTempData:state.temperature.bedroomTempData,\n    bathroomTempData:state.temperature.bathroomTempData,\n    kitchenTempData:state.temperature.kitchenTempData,\n\n  }\n}\n\nexport default connect(mapStateToProps, {\n  changeBathroomTemp, \n  changeLivingroomTemp,\n  changeKitchenTemp,\n  changeBedroomTemp,\n\n  setLivingroomStatus,\n  setKitchenStatus,\n  setBathroomStatus,\n  setBedroomStatus,\n\n  setLivingroomTempData,\n  setBedroomTempData,\n  setBathroomTempData,\n  setKitchenTempData,\n})(Room);\n"]},"metadata":{},"sourceType":"module"}