{"ast":null,"code":"var _jsxFileName = \"/Users/langgao/Documents/HiberSense Dashboard/hibersense-dash/src/components/Rooms/Room.js\";\nimport React, { Component } from 'react';\nimport LineChart from '../LineChart/LineChart';\nimport { connect } from 'react-redux';\nimport { makeData } from '../Utility/DataHandling';\nimport * as d3 from \"d3\";\nimport { changeBathroomTemp, changeLivingroomTemp, changeKitchenTemp, changeBedroomTemp } from '../store/actions/temperatureSettingAction';\n\nclass Room extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      temperatureData: {},\n      status: \"idle\"\n    };\n  }\n\n  componentWillMount() {\n    const _this$props = this.props,\n          roomName = _this$props.roomName,\n          kitchenCurrentTemp = _this$props.kitchenCurrentTemp,\n          bedroomCurrentTemp = _this$props.bedroomCurrentTemp,\n          bathroomCurrentTemp = _this$props.bathroomCurrentTemp,\n          livingroomCurrentTemp = _this$props.livingroomCurrentTemp; //prefill data\n\n    const fillData = currentTemp => {\n      this.setState({\n        temperatureData: makeData(currentTemp, 0.2)\n      });\n    }; // this.setState({\n    //   kitchenData:makeData(kitchenCurrentTemp,0.2),\n    //   bedroomData:makeData(bedroomCurrentTemp,0.2),\n    //   livingroomData:makeData(livingroomCurrentTemp,0.2),\n    //   bathroomData:makeData(bathroomCurrentTemp,0.2),\n    // })\n\n\n    if (roomName === \"Kitchen\") fillData(kitchenCurrentTemp);\n    if (roomName === \"Bedroom\") fillData(bedroomCurrentTemp);\n    if (roomName === \"Livingroom\") fillData(livingroomCurrentTemp);\n    if (roomName === \"Bathroom\") fillData(bathroomCurrentTemp);\n  }\n\n  componentDidMount() {\n    const _this$props2 = this.props,\n          roomName = _this$props2.roomName,\n          kitchenTemperature = _this$props2.kitchenTemperature,\n          livingroomTemperature = _this$props2.livingroomTemperature,\n          bathroomTemperature = _this$props2.bathroomTemperature,\n          bedroomTemperature = _this$props2.bedroomTemperature,\n          kitchenCurrentTemp = _this$props2.kitchenCurrentTemp,\n          bedroomCurrentTemp = _this$props2.bedroomCurrentTemp,\n          bathroomCurrentTemp = _this$props2.bathroomCurrentTemp,\n          livingroomCurrentTemp = _this$props2.livingroomCurrentTemp;\n\n    var tempTarget = function () {\n      if (roomName === \"Kitchen\") return kitchenTemperature;\n      if (roomName === \"Livingroom\") return livingroomTemperature;\n      if (roomName === \"Bedroom\") return bedroomTemperature;\n      if (roomName === \"Bathroom\") return bathroomTemperature;\n    }();\n\n    tempTarget = typeof tempTarget === \"number\" ? tempTarget : tempTarget.temperature;\n\n    var currentTemp = function () {\n      if (roomName === \"Kitchen\") return kitchenCurrentTemp;\n      if (roomName === \"Livingroom\") return livingroomCurrentTemp;\n      if (roomName === \"Bedroom\") return bedroomCurrentTemp;\n      if (roomName === \"Bathroom\") return bathroomCurrentTemp;\n    }();\n\n    currentTemp = typeof currentTemp === \"number\" ? currentTemp : currentTemp.temperature;\n    const tempDiff = tempTarget - currentTemp; //set room status: cooling/heating/idle\n\n    if (tempDiff > 0) {\n      this.setState({\n        status: \"heating\"\n      });\n    } else if (tempDiff < 0) {\n      this.setState({\n        status: \"cooling\"\n      });\n    } else {\n      this.setState({\n        status: \"idle\"\n      });\n    }\n\n    ;\n    this.showTempInterval = setInterval(() => {\n      if (currentTemp === tempTarget) {\n        var data = this.state.temperatureData;\n        data.push({\n          date: new Date(),\n          value: d3.randomNormal(currentTemp, 0.2)()\n        });\n        data.shift();\n        this.setState({\n          temperatureData: data,\n          status: \"idle\"\n        });\n      }\n    }, 1000);\n    this.changeTempInterval = setInterval(() => {\n      if (currentTemp !== tempTarget) {\n        if (roomName === \"Kitchen\") {\n          currentTemp = Math.round((currentTemp + tempDiff / 10) * 10) / 10;\n          changeKitchenTemp(currentTemp);\n          var kitchenData = this.state.temperatureData;\n          kitchenData.push({\n            date: new Date(),\n            value: d3.randomNormal(currentTemp, 0.2)()\n          });\n          kitchenData.shift();\n          this.setState({\n            temperatureData: kitchenData\n          });\n          console.log(\"this.state.kitchenData\", this.state.kitchenData);\n        }\n\n        if (roomName === \"Bedroom\") {\n          currentTemp = Math.round((currentTemp + tempDiff / 10) * 10) / 10;\n          changeBedroomTemp(currentTemp);\n          var bedroomData = this.state.temperatureData;\n          bedroomData.push({\n            date: new Date(),\n            value: d3.randomNormal(currentTemp, 0.2)()\n          });\n          bedroomData.shift();\n          this.setState({\n            temperatureData: bedroomData\n          });\n        }\n\n        if (roomName === \"Bathroom\") {\n          currentTemp = Math.round((currentTemp + tempDiff / 10) * 10) / 10;\n          changeBathroomTemp(currentTemp);\n          var bathroomData = this.state.temperatureData;\n          bathroomData.push({\n            date: new Date(),\n            value: d3.randomNormal(currentTemp, 0.2)()\n          });\n          bathroomData.shift();\n          this.setState({\n            temperatureData: bathroomData\n          });\n        }\n\n        if (roomName === \"Livingroom\") {\n          currentTemp = Math.round((currentTemp + tempDiff / 10) * 10) / 10;\n          changeLivingroomTemp(currentTemp);\n          var livingroomData = this.state.temperatureData;\n          livingroomData.push({\n            date: new Date(),\n            value: d3.randomNormal(currentTemp, 0.2)()\n          });\n          livingroomData.shift();\n          this.setState({\n            temperatureData: livingroomData\n          });\n        }\n\n        tempTarget = Math.round(tempTarget * 10) / 10;\n\n        if (currentTemp === tempTarget) {\n          clearInterval(this.changeTempInterval);\n        }\n      }\n    }, 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.changeTempInterval);\n    clearInterval(this.showTempInterval);\n  }\n\n  render() {\n    const _this$props3 = this.props,\n          roomName = _this$props3.roomName,\n          type = _this$props3.type;\n    const _this$state = this.state,\n          temperatureData = _this$state.temperatureData,\n          status = _this$state.status;\n    var Temperature = temperatureData[temperatureData.length - 1].value;\n    Temperature = Math.round(Temperature * 100) / 100;\n    return React.createElement(\"div\", {\n      className: \"room\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, roomName), React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, \"Temperature: \", Temperature, \"\\xB0F \"), React.createElement(\"div\", {\n      className: \"status\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, status === \"idle\" ? React.createElement(\"h5\", {\n      className: \"idle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, \"Status: \", React.createElement(\"span\", {\n      style: {\n        color: \"#575252\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, \"idle\")) : React.createElement(\"h5\", {\n      className: \"waiting\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, \"Status:\", status, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, \".\"), React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, \".\"), React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, \".\"))), React.createElement(LineChart, {\n      type: type,\n      width: 600,\n      height: 400,\n      data: temperatureData,\n      range: [65, 90],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    kitchenTemperature: state.temperature.kitchenTemperature,\n    livingroomTemperature: state.temperature.livingroomTemperature,\n    bedroomTemperature: state.temperature.bedroomTemperature,\n    bathroomTemperature: state.temperature.bathroomTemperature,\n    livingroomCurrentTemp: state.temperature.livingroomCurrentTemp,\n    bedroomCurrentTemp: state.temperature.bedroomCurrentTemp,\n    bathroomCurrentTemp: state.temperature.bathroomCurrentTemp,\n    kitchenCurrentTemp: state.temperature.kitchenCurrentTemp\n  };\n};\n\nexport default connect(mapStateToProps, {\n  changeBathroomTemp,\n  changeLivingroomTemp,\n  changeKitchenTemp,\n  changeBedroomTemp\n})(Room);","map":{"version":3,"sources":["/Users/langgao/Documents/HiberSense Dashboard/hibersense-dash/src/components/Rooms/Room.js"],"names":["React","Component","LineChart","connect","makeData","d3","changeBathroomTemp","changeLivingroomTemp","changeKitchenTemp","changeBedroomTemp","Room","constructor","props","state","temperatureData","status","componentWillMount","roomName","kitchenCurrentTemp","bedroomCurrentTemp","bathroomCurrentTemp","livingroomCurrentTemp","fillData","currentTemp","setState","componentDidMount","kitchenTemperature","livingroomTemperature","bathroomTemperature","bedroomTemperature","tempTarget","temperature","tempDiff","showTempInterval","setInterval","data","push","date","Date","value","randomNormal","shift","changeTempInterval","Math","round","kitchenData","console","log","bedroomData","bathroomData","livingroomData","clearInterval","componentWillUnmount","render","type","Temperature","length","color","mapStateToProps"],"mappings":";AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,QAAR,QAAuB,yBAAvB;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;AACA,SACEC,kBADF,EAEEC,oBAFF,EAGEC,iBAHF,EAIEC,iBAJF,QAKO,2CALP;;AAOA,MAAMC,IAAN,SAAmBT,SAAnB,CAA6B;AAC3BU,EAAAA,WAAW,CAACC,KAAD,EAAO;AAChB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAW;AACTC,MAAAA,eAAe,EAAC,EADP;AAETC,MAAAA,MAAM,EAAC;AAFE,KAAX;AAID;;AAEDC,EAAAA,kBAAkB,GAAE;AAAA,wBAMS,KAAKJ,KANd;AAAA,UAEhBK,QAFgB,eAEhBA,QAFgB;AAAA,UAGhBC,kBAHgB,eAGhBA,kBAHgB;AAAA,UAIhBC,kBAJgB,eAIhBA,kBAJgB;AAAA,UAKhBC,mBALgB,eAKhBA,mBALgB;AAAA,UAMhBC,qBANgB,eAMhBA,qBANgB,EAOlB;;AAEA,UAAMC,QAAQ,GAACC,WAAW,IAAE;AAC1B,WAAKC,QAAL,CAAc;AACZV,QAAAA,eAAe,EAACV,QAAQ,CAACmB,WAAD,EAAa,GAAb;AADZ,OAAd;AAGD,KAJD,CATkB,CAclB;AACA;AACA;AACA;AACA;AACA;;;AACA,QAAGN,QAAQ,KAAG,SAAd,EAAyBK,QAAQ,CAACJ,kBAAD,CAAR;AACzB,QAAGD,QAAQ,KAAG,SAAd,EAAyBK,QAAQ,CAACH,kBAAD,CAAR;AACzB,QAAGF,QAAQ,KAAG,YAAd,EAA4BK,QAAQ,CAACD,qBAAD,CAAR;AAC5B,QAAGJ,QAAQ,KAAG,UAAd,EAA0BK,QAAQ,CAACF,mBAAD,CAAR;AAC3B;;AAEDK,EAAAA,iBAAiB,GAAE;AAAA,yBAab,KAAKb,KAbQ;AAAA,UAEfK,QAFe,gBAEfA,QAFe;AAAA,UAIfS,kBAJe,gBAIfA,kBAJe;AAAA,UAKfC,qBALe,gBAKfA,qBALe;AAAA,UAMfC,mBANe,gBAMfA,mBANe;AAAA,UAOfC,kBAPe,gBAOfA,kBAPe;AAAA,UASfX,kBATe,gBASfA,kBATe;AAAA,UAUfC,kBAVe,gBAUfA,kBAVe;AAAA,UAWfC,mBAXe,gBAWfA,mBAXe;AAAA,UAYfC,qBAZe,gBAYfA,qBAZe;;AAejB,QAAIS,UAAU,GAAG,YAAU;AACzB,UAAGb,QAAQ,KAAG,SAAd,EAAyB,OAAOS,kBAAP;AACzB,UAAGT,QAAQ,KAAG,YAAd,EAA4B,OAAOU,qBAAP;AAC5B,UAAGV,QAAQ,KAAG,SAAd,EAAyB,OAAOY,kBAAP;AACzB,UAAGZ,QAAQ,KAAG,UAAd,EAAyB,OAAOW,mBAAP;AAC1B,KALe,EAAhB;;AAOAE,IAAAA,UAAU,GAAG,OAAOA,UAAP,KAAsB,QAAtB,GAAgCA,UAAhC,GAA4CA,UAAU,CAACC,WAApE;;AAEA,QAAIR,WAAW,GAAG,YAAU;AAC1B,UAAGN,QAAQ,KAAG,SAAd,EAAyB,OAAOC,kBAAP;AACzB,UAAGD,QAAQ,KAAG,YAAd,EAA4B,OAAOI,qBAAP;AAC5B,UAAGJ,QAAQ,KAAG,SAAd,EAAyB,OAAOE,kBAAP;AACzB,UAAGF,QAAQ,KAAG,UAAd,EAAyB,OAAOG,mBAAP;AAC1B,KALgB,EAAjB;;AAQAG,IAAAA,WAAW,GAAG,OAAOA,WAAP,KAAuB,QAAvB,GAAiCA,WAAjC,GAA8CA,WAAW,CAACQ,WAAxE;AAEA,UAAMC,QAAQ,GAAGF,UAAU,GAAGP,WAA9B,CAlCiB,CAoCjB;;AACA,QAAGS,QAAQ,GAAC,CAAZ,EAAc;AACZ,WAAKR,QAAL,CAAc;AAACT,QAAAA,MAAM,EAAC;AAAR,OAAd;AACD,KAFD,MAEM,IAAGiB,QAAQ,GAAE,CAAb,EAAe;AACnB,WAAKR,QAAL,CAAc;AAACT,QAAAA,MAAM,EAAC;AAAR,OAAd;AACD,KAFK,MAED;AACH,WAAKS,QAAL,CAAc;AAACT,QAAAA,MAAM,EAAC;AAAR,OAAd;AACD;;AAAA;AAGD,SAAKkB,gBAAL,GAAwBC,WAAW,CAAC,MAAI;AACtC,UAAGX,WAAW,KAAKO,UAAnB,EAA8B;AAC1B,YAAIK,IAAI,GAAG,KAAKtB,KAAL,CAAWC,eAAtB;AACAqB,QAAAA,IAAI,CAACC,IAAL,CAAU;AAACC,UAAAA,IAAI,EAAC,IAAIC,IAAJ,EAAN;AAAiBC,UAAAA,KAAK,EAAClC,EAAE,CAACmC,YAAH,CAAgBjB,WAAhB,EAA6B,GAA7B;AAAvB,SAAV;AACAY,QAAAA,IAAI,CAACM,KAAL;AAEA,aAAKjB,QAAL,CAAc;AACZV,UAAAA,eAAe,EAACqB,IADJ;AAEZpB,UAAAA,MAAM,EAAC;AAFK,SAAd;AAIH;AAAC,KAV+B,EAU9B,IAV8B,CAAnC;AAYA,SAAK2B,kBAAL,GAA0BR,WAAW,CAAC,MAAI;AACxC,UAAGX,WAAW,KAAGO,UAAjB,EAA4B;AAC1B,YAAGb,QAAQ,KAAG,SAAd,EAAyB;AAEvBM,UAAAA,WAAW,GAACoB,IAAI,CAACC,KAAL,CAAW,CAACrB,WAAW,GAACS,QAAQ,GAAC,EAAtB,IAA0B,EAArC,IAAyC,EAArD;AACAxB,UAAAA,iBAAiB,CAACe,WAAD,CAAjB;AACA,cAAIsB,WAAW,GAAG,KAAKhC,KAAL,CAAWC,eAA7B;AAEA+B,UAAAA,WAAW,CAACT,IAAZ,CAAiB;AAACC,YAAAA,IAAI,EAAC,IAAIC,IAAJ,EAAN;AAAiBC,YAAAA,KAAK,EAAClC,EAAE,CAACmC,YAAH,CAAgBjB,WAAhB,EAA6B,GAA7B;AAAvB,WAAjB;AACAsB,UAAAA,WAAW,CAACJ,KAAZ;AACA,eAAKjB,QAAL,CAAc;AACZV,YAAAA,eAAe,EAAC+B;AADJ,WAAd;AAGAC,UAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAqC,KAAKlC,KAAL,CAAWgC,WAAhD;AACD;;AACD,YAAG5B,QAAQ,KAAG,SAAd,EAAyB;AACvBM,UAAAA,WAAW,GAACoB,IAAI,CAACC,KAAL,CAAW,CAACrB,WAAW,GAACS,QAAQ,GAAC,EAAtB,IAA0B,EAArC,IAAyC,EAArD;AACAvB,UAAAA,iBAAiB,CAACc,WAAD,CAAjB;AACA,cAAIyB,WAAW,GAAG,KAAKnC,KAAL,CAAWC,eAA7B;AACAkC,UAAAA,WAAW,CAACZ,IAAZ,CAAiB;AAACC,YAAAA,IAAI,EAAC,IAAIC,IAAJ,EAAN;AAAiBC,YAAAA,KAAK,EAAClC,EAAE,CAACmC,YAAH,CAAgBjB,WAAhB,EAA6B,GAA7B;AAAvB,WAAjB;AACAyB,UAAAA,WAAW,CAACP,KAAZ;AACA,eAAKjB,QAAL,CAAc;AACZV,YAAAA,eAAe,EAACkC;AADJ,WAAd;AAGD;;AACD,YAAG/B,QAAQ,KAAG,UAAd,EAA0B;AACxBM,UAAAA,WAAW,GAACoB,IAAI,CAACC,KAAL,CAAW,CAACrB,WAAW,GAACS,QAAQ,GAAC,EAAtB,IAA0B,EAArC,IAAyC,EAArD;AACA1B,UAAAA,kBAAkB,CAACiB,WAAD,CAAlB;AACA,cAAI0B,YAAY,GAAG,KAAKpC,KAAL,CAAWC,eAA9B;AACAmC,UAAAA,YAAY,CAACb,IAAb,CAAkB;AAACC,YAAAA,IAAI,EAAC,IAAIC,IAAJ,EAAN;AAAiBC,YAAAA,KAAK,EAAClC,EAAE,CAACmC,YAAH,CAAgBjB,WAAhB,EAA6B,GAA7B;AAAvB,WAAlB;AACA0B,UAAAA,YAAY,CAACR,KAAb;AACA,eAAKjB,QAAL,CAAc;AACZV,YAAAA,eAAe,EAACmC;AADJ,WAAd;AAGD;;AACD,YAAGhC,QAAQ,KAAG,YAAd,EAA4B;AAC1BM,UAAAA,WAAW,GAACoB,IAAI,CAACC,KAAL,CAAW,CAACrB,WAAW,GAACS,QAAQ,GAAC,EAAtB,IAA0B,EAArC,IAAyC,EAArD;AACAzB,UAAAA,oBAAoB,CAACgB,WAAD,CAApB;AACA,cAAI2B,cAAc,GAAG,KAAKrC,KAAL,CAAWC,eAAhC;AACAoC,UAAAA,cAAc,CAACd,IAAf,CAAoB;AAACC,YAAAA,IAAI,EAAC,IAAIC,IAAJ,EAAN;AAAiBC,YAAAA,KAAK,EAAClC,EAAE,CAACmC,YAAH,CAAgBjB,WAAhB,EAA6B,GAA7B;AAAvB,WAApB;AACA2B,UAAAA,cAAc,CAACT,KAAf;AACA,eAAKjB,QAAL,CAAc;AACZV,YAAAA,eAAe,EAACoC;AADJ,WAAd;AAGD;;AAEDpB,QAAAA,UAAU,GAAGa,IAAI,CAACC,KAAL,CAAWd,UAAU,GAAC,EAAtB,IAA0B,EAAvC;;AAEA,YAAGP,WAAW,KAAKO,UAAnB,EAA8B;AAC5BqB,UAAAA,aAAa,CAAC,KAAKT,kBAAN,CAAb;AACD;AACF;AACF,KApDoC,EAoDnC,IApDmC,CAArC;AAsDD;;AAEDU,EAAAA,oBAAoB,GAAE;AACpBD,IAAAA,aAAa,CAAC,KAAKT,kBAAN,CAAb;AACAS,IAAAA,aAAa,CAAC,KAAKlB,gBAAN,CAAb;AACD;;AAEDoB,EAAAA,MAAM,GAAG;AAAA,yBACgB,KAAKzC,KADrB;AAAA,UACAK,QADA,gBACAA,QADA;AAAA,UACSqC,IADT,gBACSA,IADT;AAAA,wBAKH,KAAKzC,KALF;AAAA,UAGLC,eAHK,eAGLA,eAHK;AAAA,UAILC,MAJK,eAILA,MAJK;AAQP,QAAIwC,WAAW,GAAGzC,eAAe,CAACA,eAAe,CAAC0C,MAAhB,GAAuB,CAAxB,CAAf,CAA0CjB,KAA5D;AACAgB,IAAAA,WAAW,GAAGZ,IAAI,CAACC,KAAL,CAAWW,WAAW,GAAC,GAAvB,IAA4B,GAA1C;AACA,WACE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKtC,QAAL,CADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAkBsC,WAAlB,WAFJ,EAGI;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACIxC,MAAM,KAAG,MAAV,GAAkB;AAAI,MAAA,SAAS,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAA6B;AAAM,MAAA,KAAK,EAAE;AAAC0C,QAAAA,KAAK,EAAC;AAAP,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAA7B,CAAlB,GACD;AAAI,MAAA,SAAS,EAAC,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAgC1C,MAAhC,EAAuC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAvC,EAAqD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAArD,EAAmE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAnE,CAFF,CAHJ,EASI,oBAAC,SAAD;AACI,MAAA,IAAI,EAAEuC,IADV;AAEI,MAAA,KAAK,EAAE,GAFX;AAGI,MAAA,MAAM,EAAE,GAHZ;AAII,MAAA,IAAI,EAAIxC,eAJZ;AAKI,MAAA,KAAK,EAAE,CAAC,EAAD,EAAI,EAAJ,CALX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MATJ,CADF;AAmBD;;AAvL0B;;AA0L7B,MAAM4C,eAAe,GAAC7C,KAAK,IAAE;AAE3B,SAAM;AACJa,IAAAA,kBAAkB,EAAEb,KAAK,CAACkB,WAAN,CAAkBL,kBADlC;AAEJC,IAAAA,qBAAqB,EAAEd,KAAK,CAACkB,WAAN,CAAkBJ,qBAFrC;AAGJE,IAAAA,kBAAkB,EAAEhB,KAAK,CAACkB,WAAN,CAAkBF,kBAHlC;AAIJD,IAAAA,mBAAmB,EAAEf,KAAK,CAACkB,WAAN,CAAkBH,mBAJnC;AAMJP,IAAAA,qBAAqB,EAACR,KAAK,CAACkB,WAAN,CAAkBV,qBANpC;AAOJF,IAAAA,kBAAkB,EAACN,KAAK,CAACkB,WAAN,CAAkBZ,kBAPjC;AAQJC,IAAAA,mBAAmB,EAACP,KAAK,CAACkB,WAAN,CAAkBX,mBARlC;AASJF,IAAAA,kBAAkB,EAACL,KAAK,CAACkB,WAAN,CAAkBb;AATjC,GAAN;AAYD,CAdD;;AAgBA,eAAef,OAAO,CAACuD,eAAD,EAAkB;AACtCpD,EAAAA,kBADsC;AAEtCC,EAAAA,oBAFsC;AAGtCC,EAAAA,iBAHsC;AAItCC,EAAAA;AAJsC,CAAlB,CAAP,CAKZC,IALY,CAAf","sourcesContent":["\nimport React, { Component } from 'react'\nimport LineChart from '../LineChart/LineChart';\nimport {connect} from 'react-redux';\nimport {makeData} from '../Utility/DataHandling';\nimport * as d3 from \"d3\";\nimport {\n  changeBathroomTemp,\n  changeLivingroomTemp,\n  changeKitchenTemp,\n  changeBedroomTemp,\n} from '../store/actions/temperatureSettingAction';\n\nclass Room extends Component {\n  constructor(props){\n    super(props);\n    this.state={\n      temperatureData:{},\n      status:\"idle\"\n    }\n  }\n\n  componentWillMount(){\n    const {\n      roomName,\n      kitchenCurrentTemp,\n      bedroomCurrentTemp,\n      bathroomCurrentTemp,\n      livingroomCurrentTemp} = this.props;\n    //prefill data\n\n    const fillData=currentTemp=>{\n      this.setState({\n        temperatureData:makeData(currentTemp,0.2)\n      })\n    }\n    // this.setState({\n    //   kitchenData:makeData(kitchenCurrentTemp,0.2),\n    //   bedroomData:makeData(bedroomCurrentTemp,0.2),\n    //   livingroomData:makeData(livingroomCurrentTemp,0.2),\n    //   bathroomData:makeData(bathroomCurrentTemp,0.2),\n    // })\n    if(roomName===\"Kitchen\") fillData(kitchenCurrentTemp);\n    if(roomName===\"Bedroom\") fillData(bedroomCurrentTemp);\n    if(roomName===\"Livingroom\") fillData(livingroomCurrentTemp);\n    if(roomName===\"Bathroom\") fillData(bathroomCurrentTemp);\n  }\n  \n  componentDidMount(){\n    const {\n      roomName, \n\n      kitchenTemperature,\n      livingroomTemperature,\n      bathroomTemperature,\n      bedroomTemperature,\n\n      kitchenCurrentTemp,\n      bedroomCurrentTemp,\n      bathroomCurrentTemp,\n      livingroomCurrentTemp,  \n    } = this.props;\n\n    var tempTarget =(function(){\n      if(roomName===\"Kitchen\") return kitchenTemperature;\n      if(roomName===\"Livingroom\") return livingroomTemperature;\n      if(roomName===\"Bedroom\") return bedroomTemperature;\n      if(roomName===\"Bathroom\")return bathroomTemperature;\n    })();\n\n    tempTarget = typeof tempTarget === \"number\"? tempTarget: tempTarget.temperature;\n\n    var currentTemp =(function(){\n      if(roomName===\"Kitchen\") return kitchenCurrentTemp;\n      if(roomName===\"Livingroom\") return livingroomCurrentTemp;\n      if(roomName===\"Bedroom\") return bedroomCurrentTemp;\n      if(roomName===\"Bathroom\")return bathroomCurrentTemp;\n    })();\n\n\n    currentTemp = typeof currentTemp === \"number\"? currentTemp: currentTemp.temperature;\n\n    const tempDiff = tempTarget - currentTemp;\n\n    //set room status: cooling/heating/idle\n    if(tempDiff>0){\n      this.setState({status:\"heating\"})\n    }else if(tempDiff <0){\n      this.setState({status:\"cooling\"})\n    }else{\n      this.setState({status:\"idle\"})\n    };\n\n\n    this.showTempInterval = setInterval(()=>{\n      if(currentTemp === tempTarget){\n          var data = this.state.temperatureData;\n          data.push({date:new Date(),value:d3.randomNormal(currentTemp, 0.2)()});\n          data.shift();\n\n          this.setState({\n            temperatureData:data,\n            status:\"idle\"\n          })\n      }},1000)\n\n    this.changeTempInterval = setInterval(()=>{\n      if(currentTemp!==tempTarget){\n        if(roomName===\"Kitchen\") {\n\n          currentTemp=Math.round((currentTemp+tempDiff/10)*10)/10;\n          changeKitchenTemp(currentTemp);\n          var kitchenData = this.state.temperatureData;\n\n          kitchenData.push({date:new Date(),value:d3.randomNormal(currentTemp, 0.2)()});\n          kitchenData.shift();\n          this.setState({\n            temperatureData:kitchenData\n          })\n          console.log(\"this.state.kitchenData\",this.state.kitchenData);\n        }\n        if(roomName===\"Bedroom\") {\n          currentTemp=Math.round((currentTemp+tempDiff/10)*10)/10;\n          changeBedroomTemp(currentTemp);\n          var bedroomData = this.state.temperatureData;\n          bedroomData.push({date:new Date(),value:d3.randomNormal(currentTemp, 0.2)()});\n          bedroomData.shift();\n          this.setState({\n            temperatureData:bedroomData\n          })\n        }\n        if(roomName===\"Bathroom\") {\n          currentTemp=Math.round((currentTemp+tempDiff/10)*10)/10;\n          changeBathroomTemp(currentTemp);\n          var bathroomData = this.state.temperatureData;\n          bathroomData.push({date:new Date(),value:d3.randomNormal(currentTemp, 0.2)()});\n          bathroomData.shift();\n          this.setState({\n            temperatureData:bathroomData\n          })\n        }\n        if(roomName===\"Livingroom\") {\n          currentTemp=Math.round((currentTemp+tempDiff/10)*10)/10;\n          changeLivingroomTemp(currentTemp);\n          var livingroomData = this.state.temperatureData;\n          livingroomData.push({date:new Date(),value:d3.randomNormal(currentTemp, 0.2)()});\n          livingroomData.shift();\n          this.setState({\n            temperatureData:livingroomData\n          })\n        }\n  \n        tempTarget = Math.round(tempTarget*10)/10;\n        \n        if(currentTemp === tempTarget){\n          clearInterval(this.changeTempInterval);\n        }\n      }\n    },1000)\n\n  }\n\n  componentWillUnmount(){\n    clearInterval(this.changeTempInterval);\n    clearInterval(this.showTempInterval);\n  }\n\n  render() {\n    const {roomName,type} =this.props;\n    const {\n      temperatureData,\n      status\n    } = this.state;\n\n    \n    var Temperature = temperatureData[temperatureData.length-1].value;\n    Temperature = Math.round(Temperature*100)/100;\n    return (\n      <div className='room'>\n          <h1>{roomName}</h1>\n          <h5>Temperature: {Temperature}°F </h5>\n          <div className=\"status\"> \n            {(status===\"idle\")?<h5 className=\"idle\">Status: <span style={{color:\"#575252\"}}>idle</span></h5> : \n            <h5 className=\"waiting\">Status:{status}<span>.</span><span>.</span><span>.</span>\n            </h5>}\n          </div>\n\n          <LineChart \n              type={type}\n              width={600} \n              height={400}\n              data = {temperatureData}\n              range={[65,90]}\n          />\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps=state=>{\n\n  return{\n    kitchenTemperature: state.temperature.kitchenTemperature,\n    livingroomTemperature: state.temperature.livingroomTemperature,\n    bedroomTemperature: state.temperature.bedroomTemperature,\n    bathroomTemperature: state.temperature.bathroomTemperature,\n\n    livingroomCurrentTemp:state.temperature.livingroomCurrentTemp,\n    bedroomCurrentTemp:state.temperature.bedroomCurrentTemp,\n    bathroomCurrentTemp:state.temperature.bathroomCurrentTemp,\n    kitchenCurrentTemp:state.temperature.kitchenCurrentTemp,\n\n  }\n}\n\nexport default connect(mapStateToProps, {\n  changeBathroomTemp, \n  changeLivingroomTemp,\n  changeKitchenTemp,\n  changeBedroomTemp,\n})(Room);\n"]},"metadata":{},"sourceType":"module"}