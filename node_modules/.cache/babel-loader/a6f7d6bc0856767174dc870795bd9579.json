{"ast":null,"code":"var _jsxFileName = \"/Users/langgao/Documents/HiberSense Dashboard/hibersense-dash/src/components/Rooms/Room.js\";\nimport React, { Component } from 'react';\nimport LineChart from '../LineChart/LineChart';\nimport { connect } from 'react-redux';\nimport { makeData } from '../Utility/DataHandling';\nimport * as d3 from \"d3\";\nimport { changeBathroomTemp, changeLivingroomTemp, changeKitchenTemp, changeBedroomTemp, setLivingroomStatus, setKitchenStatus, setBathroomStatus, setBedroomStatus, setLivingroomTempData, setBedroomTempData, setBathroomTempData, setKitchenTempData } from '../store/actions/temperatureSettingAction';\n\nclass Room extends Component {\n  constructor(props) {\n    super();\n  }\n\n  componentDidMount() {\n    const _this$props = this.props,\n          kitchenCurrentTemp = _this$props.kitchenCurrentTemp,\n          bedroomCurrentTemp = _this$props.bedroomCurrentTemp,\n          bathroomCurrentTemp = _this$props.bathroomCurrentTemp,\n          livingroomCurrentTemp = _this$props.livingroomCurrentTemp,\n          setLivingroomTempData = _this$props.setLivingroomTempData,\n          setBedroomTempData = _this$props.setBedroomTempData,\n          setBathroomTempData = _this$props.setBathroomTempData,\n          setKitchenTempData = _this$props.setKitchenTempData; //prefill data\n\n    setLivingroomTempData(makeData(livingroomCurrentTemp, 0.2));\n    setBedroomTempData(makeData(bedroomCurrentTemp, 0.2));\n    setBathroomTempData(makeData(bathroomCurrentTemp, 0.2));\n    setKitchenTempData(makeData(kitchenCurrentTemp, 0.2));\n  }\n\n  componentDidUpdate() {\n    const _this$props2 = this.props,\n          roomName = _this$props2.roomName,\n          kitchenTemperature = _this$props2.kitchenTemperature,\n          livingroomTemperature = _this$props2.livingroomTemperature,\n          bathroomTemperature = _this$props2.bathroomTemperature,\n          bedroomTemperature = _this$props2.bedroomTemperature,\n          kitchenCurrentTemp = _this$props2.kitchenCurrentTemp,\n          bedroomCurrentTemp = _this$props2.bedroomCurrentTemp,\n          bathroomCurrentTemp = _this$props2.bathroomCurrentTemp,\n          livingroomCurrentTemp = _this$props2.livingroomCurrentTemp,\n          livingroomTempData = _this$props2.livingroomTempData,\n          bedroomTempData = _this$props2.bedroomTempData,\n          bathroomTempData = _this$props2.bathroomTempData,\n          kitchenTempData = _this$props2.kitchenTempData,\n          changeBathroomTemp = _this$props2.changeBathroomTemp,\n          changeLivingroomTemp = _this$props2.changeLivingroomTemp,\n          changeKitchenTemp = _this$props2.changeKitchenTemp,\n          changeBedroomTemp = _this$props2.changeBedroomTemp;\n\n    const temp = function () {\n      if (roomName === \"Kitchen\") return {\n        kitchenTemperature,\n        kitchenCurrentTemp\n      };\n      if (roomName === \"Livingroom\") return {\n        livingroomTemperature,\n        livingroomCurrentTemp\n      };\n      if (roomName === \"Bedroom\") return {\n        bedroomTemperature,\n        bedroomCurrentTemp\n      };\n      if (roomName === \"Bathroom\") return {\n        bathroomTemperature,\n        bathroomCurrentTemp\n      };\n    }();\n\n    var tempTarget = temp.tempTarget,\n        currentTemp = temp.currentTemp;\n    const tempDiff = tempTarget - currentTemp; //set room status: cooling/heating/idle\n\n    const setStatus = setRoomStatus => {\n      if (tempDiff > 0) {\n        setRoomStatus(\"heating\");\n      } else if (tempDiff < 0) {\n        setRoomStatus(\"cooling\");\n      } else {\n        setRoomStatus(\"idle\");\n      }\n\n      ;\n    };\n\n    if (roomName === \"Kitchen\") setStatus(setKitchenStatus);\n    if (roomName === \"Bedroom\") setStatus(setBedroomStatus);\n    if (roomName === \"Livingroom\") setStatus(setLivingroomStatus);\n    if (roomName === \"Bathroom\") setStatus(setBathroomStatus); // if(kitchenTempData&&kitchenTempData.length>0){\n\n    this.showTempInterval = setInterval(() => {\n      if (currentTemp === tempTarget) {\n        if (roomName === \"Kitchen\") {\n          var kitchenData = typeof kitchenTempData.data === \"undefined\" ? kitchenTempData : kitchenTempData.data;\n          console.log(\"kitchenTempData\", kitchenTempData);\n          console.log(\"bathroomTempData\", bathroomTempData);\n          kitchenData.push({\n            date: new Date(),\n            value: d3.randomNormal(currentTemp, 0.2)()\n          });\n          kitchenData.shift();\n          setKitchenTempData(kitchenData);\n        }\n\n        if (roomName === \"Bedroom\") {\n          var bedroomData = typeof bedroomTempData.data === \"undefined\" ? bedroomTempData : bedroomTempData.data;\n          bedroomData.push({\n            date: new Date(),\n            value: d3.randomNormal(currentTemp, 0.2)()\n          });\n          bedroomData.shift();\n          setBedroomTempData(bedroomData);\n        }\n\n        if (roomName === \"Bathroom\") {\n          var bathroomData = typeof bathroomTempData.data === \"undefined\" ? bathroomTempData : bathroomTempData.data;\n          bathroomData.push({\n            date: new Date(),\n            value: d3.randomNormal(currentTemp, 0.2)()\n          });\n          bathroomData.shift();\n          setBathroomTempData(bathroomData);\n        }\n\n        if (roomName === \"Livingroom\") {\n          var livingroomData = typeof livingroomTempData.data === \"undefined\" ? livingroomTempData : livingroomTempData.data;\n          livingroomData.push({\n            date: new Date(),\n            value: d3.randomNormal(currentTemp, 0.2)()\n          });\n          livingroomData.shift();\n          setLivingroomTempData(livingroomData);\n        }\n      }\n    }, 1000);\n    this.changeTempInterval = setInterval(() => {\n      if (currentTemp !== tempTarget) {\n        if (roomName === \"Kitchen\") {\n          currentTemp = Math.round((currentTemp + tempDiff / 10) * 10) / 10;\n          changeKitchenTemp(currentTemp);\n          var kitchenData = kitchenTempData;\n          kitchenData.push({\n            date: new Date(),\n            value: d3.randomNormal(currentTemp, 0.2)()\n          });\n          kitchenData.shift();\n          setKitchenTempData(kitchenData);\n        }\n\n        if (roomName === \"Bedroom\") {\n          currentTemp = Math.round((currentTemp + tempDiff / 10) * 10) / 10;\n          changeBedroomTemp(currentTemp);\n          var bedroomData = bedroomTempData;\n          bedroomData.push({\n            date: new Date(),\n            value: d3.randomNormal(currentTemp, 0.2)()\n          });\n          bedroomData.shift();\n          setBedroomTempData(bedroomData);\n        }\n\n        if (roomName === \"Bathroom\") {\n          currentTemp = Math.round((currentTemp + tempDiff / 10) * 10) / 10;\n          changeBathroomTemp(currentTemp);\n          var bathroomData = bathroomTempData;\n          bathroomData.push({\n            date: new Date(),\n            value: d3.randomNormal(currentTemp, 0.2)()\n          });\n          bathroomData.shift();\n          setBathroomTempData(bathroomData);\n        }\n\n        if (roomName === \"Livingroom\") {\n          currentTemp = Math.round((currentTemp + tempDiff / 10) * 10) / 10;\n          changeLivingroomTemp(currentTemp);\n          var livingroomData = livingroomTempData;\n          livingroomData.push({\n            date: new Date(),\n            value: d3.randomNormal(currentTemp, 0.2)()\n          });\n          livingroomData.shift();\n          setLivingroomTempData(livingroomData);\n        }\n\n        tempTarget = Math.round(tempTarget * 10) / 10;\n\n        if (currentTemp === tempTarget) {\n          clearInterval(this.changeTempInterval);\n        }\n      }\n    }, 1000); // }\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.changeTempInterval);\n    clearInterval(this.showTempInterval);\n  }\n\n  render() {\n    const _this$props3 = this.props,\n          roomName = _this$props3.roomName,\n          type = _this$props3.type,\n          kitchenTempData = _this$props3.kitchenTempData,\n          bedroomTempData = _this$props3.bedroomTempData,\n          livingroomTempData = _this$props3.livingroomTempData,\n          bathroomTempData = _this$props3.bathroomTempData;\n\n    var data = function () {\n      if (roomName === \"Kitchen\") return kitchenTempData.data;\n      if (roomName === \"Livingroom\") return livingroomTempData.data;\n      if (roomName === \"Bedroom\") return bedroomTempData.data;\n      if (roomName === \"Bathroom\") return bathroomTempData.data;\n    }();\n\n    console.log('checkinng data...', data);\n    var temperature = \"Loading...\";\n\n    if (typeof data !== \"undefined\") {\n      const temp = data[data.length - 1].value;\n      temperature = Math.round(temp * 100) / 100;\n    }\n\n    return React.createElement(\"div\", {\n      className: \"room\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }, roomName), React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }, \"Temperature: \", temperature, \"\\xB0F \"), React.createElement(\"h6\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }, \"Status:cooling\"), React.createElement(LineChart, {\n      type: type,\n      width: 600,\n      height: 400,\n      title: 'Current Temperature',\n      data: data,\n      range: [65, 90],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    kitchenTemperature: state.temperature.kitchenTemperature,\n    livingroomTemperature: state.temperature.livingroomTemperature,\n    bedroomTemperature: state.temperature.bedroomTemperature,\n    bathroomTemperature: state.temperature.bathroomTemperature,\n    livingroomCurrentTemp: state.temperature.livingroomCurrentTemp,\n    bedroomCurrentTemp: state.temperature.bedroomCurrentTemp,\n    bathroomCurrentTemp: state.temperature.bathroomCurrentTemp,\n    kitchenCurrentTemp: state.temperature.kitchenCurrentTemp,\n    livingroomStatus: state.temperature.livingroomStatus,\n    bedroomStatus: state.temperature.bedroomStatus,\n    bathroomStatus: state.temperature.bathroomStatus,\n    kitchenStatus: state.temperature.kitchenStatus,\n    livingroomTempData: state.temperature.livingroomTempData,\n    bedroomTempData: state.temperature.bedroomTempData,\n    bathroomTempData: state.temperature.bathroomTempData,\n    kitchenTempData: state.temperature.kitchenTempData\n  };\n};\n\nexport default connect(mapStateToProps, {\n  changeBathroomTemp,\n  changeLivingroomTemp,\n  changeKitchenTemp,\n  changeBedroomTemp,\n  setLivingroomStatus,\n  setKitchenStatus,\n  setBathroomStatus,\n  setBedroomStatus,\n  setLivingroomTempData,\n  setBedroomTempData,\n  setBathroomTempData,\n  setKitchenTempData\n})(Room);","map":{"version":3,"sources":["/Users/langgao/Documents/HiberSense Dashboard/hibersense-dash/src/components/Rooms/Room.js"],"names":["React","Component","LineChart","connect","makeData","d3","changeBathroomTemp","changeLivingroomTemp","changeKitchenTemp","changeBedroomTemp","setLivingroomStatus","setKitchenStatus","setBathroomStatus","setBedroomStatus","setLivingroomTempData","setBedroomTempData","setBathroomTempData","setKitchenTempData","Room","constructor","props","componentDidMount","kitchenCurrentTemp","bedroomCurrentTemp","bathroomCurrentTemp","livingroomCurrentTemp","componentDidUpdate","roomName","kitchenTemperature","livingroomTemperature","bathroomTemperature","bedroomTemperature","livingroomTempData","bedroomTempData","bathroomTempData","kitchenTempData","temp","tempTarget","currentTemp","tempDiff","setStatus","setRoomStatus","showTempInterval","setInterval","kitchenData","data","console","log","push","date","Date","value","randomNormal","shift","bedroomData","bathroomData","livingroomData","changeTempInterval","Math","round","clearInterval","componentWillUnmount","render","type","temperature","length","mapStateToProps","state","livingroomStatus","bedroomStatus","bathroomStatus","kitchenStatus"],"mappings":"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","sourcesContent":["\nimport React, { Component } from 'react'\nimport LineChart from '../LineChart/LineChart';\nimport {connect} from 'react-redux';\nimport {makeData} from '../Utility/DataHandling';\nimport * as d3 from \"d3\";\nimport {\n  changeBathroomTemp,\n  changeLivingroomTemp,\n  changeKitchenTemp,\n  changeBedroomTemp,\n\n  setLivingroomStatus,\n  setKitchenStatus,\n  setBathroomStatus,\n  setBedroomStatus,\n\n  setLivingroomTempData,\n  setBedroomTempData,\n  setBathroomTempData,\n  setKitchenTempData,\n} from '../store/actions/temperatureSettingAction';\n\nclass Room extends Component {\n  constructor(props){\n    super();\n  }\n  \n  componentDidMount(){\n    const {\n      kitchenCurrentTemp,\n      bedroomCurrentTemp,\n      bathroomCurrentTemp,\n      livingroomCurrentTemp,\n\n\n      setLivingroomTempData,\n      setBedroomTempData,\n      setBathroomTempData,\n      setKitchenTempData,\n\n    \n    } = this.props;\n\n    //prefill data\n    setLivingroomTempData(makeData(livingroomCurrentTemp,0.2));\n    setBedroomTempData(makeData(bedroomCurrentTemp,0.2));\n    setBathroomTempData(makeData(bathroomCurrentTemp,0.2));\n    setKitchenTempData(makeData(kitchenCurrentTemp,0.2));\n  }\n\n\n  componentDidUpdate(){\n    const{\n      roomName,\n\n      kitchenTemperature,\n      livingroomTemperature,\n      bathroomTemperature,\n      bedroomTemperature,\n\n      kitchenCurrentTemp,\n      bedroomCurrentTemp,\n      bathroomCurrentTemp,\n      livingroomCurrentTemp,\n\n      livingroomTempData,\n      bedroomTempData,\n      bathroomTempData,\n      kitchenTempData,\n\n      changeBathroomTemp, \n      changeLivingroomTemp,\n      changeKitchenTemp,\n      changeBedroomTemp\n    } = this.props;\n\n    const temp =(function(){\n      if(roomName===\"Kitchen\")  return {kitchenTemperature,kitchenCurrentTemp};\n      if(roomName===\"Livingroom\") return {livingroomTemperature,livingroomCurrentTemp};\n      if(roomName===\"Bedroom\") return {bedroomTemperature, bedroomCurrentTemp};\n      if(roomName===\"Bathroom\") return {bathroomTemperature, bathroomCurrentTemp};\n    })();\n\n    var {tempTarget, currentTemp} = temp;\n\n    const tempDiff = tempTarget - currentTemp;\n\n    //set room status: cooling/heating/idle\n    const setStatus=setRoomStatus=>{\n      if(tempDiff>0){\n        setRoomStatus(\"heating\");\n      }else if(tempDiff <0){\n        setRoomStatus(\"cooling\");\n      }else{\n        setRoomStatus(\"idle\")\n      };\n    }\n\n    if(roomName===\"Kitchen\") setStatus(setKitchenStatus);\n    if(roomName===\"Bedroom\") setStatus(setBedroomStatus);\n    if(roomName===\"Livingroom\") setStatus(setLivingroomStatus);\n    if(roomName===\"Bathroom\") setStatus(setBathroomStatus);\n\n    // if(kitchenTempData&&kitchenTempData.length>0){\n\n      this.showTempInterval = setInterval(()=>{\n        if(currentTemp === tempTarget){\n          if(roomName===\"Kitchen\") {\n            var kitchenData = typeof kitchenTempData.data ===\"undefined\"?kitchenTempData:kitchenTempData.data;\n            console.log(\"kitchenTempData\",kitchenTempData);\n            console.log(\"bathroomTempData\",bathroomTempData);\n            kitchenData.push({date:new Date(),value:d3.randomNormal(currentTemp, 0.2)()});\n            kitchenData.shift();\n            setKitchenTempData(kitchenData);\n          }\n          if(roomName===\"Bedroom\") {\n  \n            var bedroomData = typeof bedroomTempData.data ===\"undefined\"?bedroomTempData:bedroomTempData.data;\n            bedroomData.push({date:new Date(),value:d3.randomNormal(currentTemp, 0.2)()});\n            bedroomData.shift();\n            setBedroomTempData(bedroomData);\n          }\n          if(roomName===\"Bathroom\") {\n            var bathroomData = typeof bathroomTempData.data ===\"undefined\"?bathroomTempData:bathroomTempData.data;\n            bathroomData.push({date:new Date(),value:d3.randomNormal(currentTemp, 0.2)()});\n            bathroomData.shift();\n            setBathroomTempData(bathroomData);\n          }\n          if(roomName===\"Livingroom\") {\n            var livingroomData = typeof livingroomTempData.data ===\"undefined\"?livingroomTempData:livingroomTempData.data;\n            livingroomData.push({date:new Date(),value:d3.randomNormal(currentTemp, 0.2)()});\n            livingroomData.shift();\n            setLivingroomTempData(livingroomData);\n          }\n        }},1000)\n  \n      this.changeTempInterval = setInterval(()=>{\n        if(currentTemp!==tempTarget){\n          if(roomName===\"Kitchen\") {\n            currentTemp=Math.round((currentTemp+tempDiff/10)*10)/10;\n            changeKitchenTemp(currentTemp);\n            var kitchenData = kitchenTempData;\n  \n            kitchenData.push({date:new Date(),value:d3.randomNormal(currentTemp, 0.2)()});\n            kitchenData.shift();\n            setKitchenTempData(kitchenData);\n          }\n          if(roomName===\"Bedroom\") {\n            currentTemp=Math.round((currentTemp+tempDiff/10)*10)/10;\n            changeBedroomTemp(currentTemp);\n  \n            var bedroomData = bedroomTempData;\n            bedroomData.push({date:new Date(),value:d3.randomNormal(currentTemp, 0.2)()});\n            bedroomData.shift();\n            setBedroomTempData(bedroomData);\n          }\n          if(roomName===\"Bathroom\") {\n            currentTemp=Math.round((currentTemp+tempDiff/10)*10)/10;\n            changeBathroomTemp(currentTemp);\n            var bathroomData = bathroomTempData;\n            bathroomData.push({date:new Date(),value:d3.randomNormal(currentTemp, 0.2)()});\n            bathroomData.shift();\n            setBathroomTempData(bathroomData);\n          }\n          if(roomName===\"Livingroom\") {\n            currentTemp=Math.round((currentTemp+tempDiff/10)*10)/10;\n            changeLivingroomTemp(currentTemp);\n            var livingroomData = livingroomTempData;\n            livingroomData.push({date:new Date(),value:d3.randomNormal(currentTemp, 0.2)()});\n            livingroomData.shift();\n            setLivingroomTempData(livingroomData);\n          }\n    \n          tempTarget = Math.round(tempTarget*10)/10;\n          \n          if(currentTemp === tempTarget){\n            clearInterval(this.changeTempInterval);\n          }\n        }\n      },1000)\n    // }\n  }\n\n  componentWillUnmount(){\n    clearInterval(this.changeTempInterval);\n    clearInterval(this.showTempInterval);\n  }\n\n  render() {\n\n    const {\n      roomName,\n      type,\n      kitchenTempData,\n      bedroomTempData,\n      livingroomTempData,\n      bathroomTempData,\n    } =this.props;\n\n\n    var data =(function(){\n      if(roomName===\"Kitchen\") return kitchenTempData.data;\n      if(roomName===\"Livingroom\") return livingroomTempData.data;\n      if(roomName===\"Bedroom\") return bedroomTempData.data;\n      if(roomName===\"Bathroom\")return bathroomTempData.data;\n    })(); \n\n    console.log('checkinng data...',data);\n\n    var temperature = \"Loading...\";\n    if(typeof data!==\"undefined\"){\n      const temp = data[data.length-1].value\n      temperature=Math.round(temp*100)/100;\n    }\n    return (\n      <div className='room'>\n          <h1>{roomName}</h1>\n          <h5>Temperature: {temperature}°F </h5>\n          <h6>Status:cooling</h6>\n\n          <LineChart \n              type={type}\n              width={600} \n              height={400}\n              title={'Current Temperature'}\n              data = {data}\n              range={[65,90]}\n          />\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps=state=>{\n\n  return{\n    kitchenTemperature: state.temperature.kitchenTemperature,\n    livingroomTemperature: state.temperature.livingroomTemperature,\n    bedroomTemperature: state.temperature.bedroomTemperature,\n    bathroomTemperature: state.temperature.bathroomTemperature,\n\n    livingroomCurrentTemp:state.temperature.livingroomCurrentTemp,\n    bedroomCurrentTemp:state.temperature.bedroomCurrentTemp,\n    bathroomCurrentTemp:state.temperature.bathroomCurrentTemp,\n    kitchenCurrentTemp:state.temperature.kitchenCurrentTemp,\n\n    livingroomStatus:state.temperature.livingroomStatus,\n    bedroomStatus:state.temperature.bedroomStatus,\n    bathroomStatus:state.temperature.bathroomStatus,\n    kitchenStatus:state.temperature.kitchenStatus,\n\n    livingroomTempData:state.temperature.livingroomTempData,\n    bedroomTempData:state.temperature.bedroomTempData,\n    bathroomTempData:state.temperature.bathroomTempData,\n    kitchenTempData:state.temperature.kitchenTempData,\n  }\n}\n\nexport default connect(mapStateToProps, {\n  changeBathroomTemp, \n  changeLivingroomTemp,\n  changeKitchenTemp,\n  changeBedroomTemp,\n\n  setLivingroomStatus,\n  setKitchenStatus,\n  setBathroomStatus,\n  setBedroomStatus,\n\n  setLivingroomTempData,\n  setBedroomTempData,\n  setBathroomTempData,\n  setKitchenTempData,\n})(Room);\n"]},"metadata":{},"sourceType":"module"}