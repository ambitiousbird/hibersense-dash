{"ast":null,"code":"var _jsxFileName = \"/Users/langgao/Documents/HiberSense Dashboard/hibersense-dash/src/components/Summary/Summary.js\";\nimport React, { Component } from 'react';\nimport LineChart from '../LineChart/LineChart';\nimport DonutChart from '../DonutChart/DonutChart';\nimport { makeData } from '../Utility/DataHandling';\nimport './summary.css';\nimport { SettingsAlert } from '../Utility/Alert';\nimport { connect } from 'react-redux';\nimport Room from '../Rooms/Room';\nimport * as d3 from 'd3';\n\nclass Summary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: {},\n      showWarning: false,\n      kitchenUsuage: 0.67,\n      bedroomUsuage: 2.22,\n      bathroomUsuage: 0.44,\n      livingroomUsuage: 1.67\n    };\n  }\n\n  componentWillMount() {\n    this.setState({\n      data: makeData(5, 0.2)\n    }); // this.loadData = setInterval(() => {\n    //   const data = makeData(1.5,0.2);\n    //   this.setState({\n    //     data:data\n    //   })\n    // }, 1000);\n  }\n\n  componentDidMount() {\n    const _this$props = this.props,\n          kitchenTemperature = _this$props.kitchenTemperature,\n          livingroomTemperature = _this$props.livingroomTemperature,\n          bathroomTemperature = _this$props.bathroomTemperature,\n          bedroomTemperature = _this$props.bedroomTemperature,\n          kitchenCurrentTemp = _this$props.kitchenCurrentTemp,\n          bedroomCurrentTemp = _this$props.bedroomCurrentTemp,\n          bathroomCurrentTemp = _this$props.bathroomCurrentTemp,\n          livingroomCurrentTemp = _this$props.livingroomCurrentTemp;\n    const _this$state = this.state,\n          kitchenUsuage = _this$state.kitchenUsuage,\n          bedroomUsuage = _this$state.bedroomUsuage,\n          bathroomUsuage = _this$state.bathroomUsuage,\n          livingroomUsuage = _this$state.livingroomUsuage;\n\n    const updateTemp = (tempTarget, currentTemp) => {\n      return {\n        temp1: typeof tempTarget === \"number\" ? tempTarget : tempTarget.temperature,\n        temp2: typeof currentTemp === \"number\" ? currentTemp : currentTemp.temperature\n      };\n    };\n\n    console.log(\"checking...\", parseInt(updateTemp(kitchenTemperature, kitchenCurrentTemp).temp1));\n    var count = 1;\n    var totalUsuage = 5;\n    var kitchenUsageCounter = 0.67;\n    var bedroomUsuageCounter = 2.22;\n    var bathroomUsageCounter = 0.44;\n    var livingroomUsageCounter = 1.67;\n    this.updateUsuageInterval = setInterval(() => {\n      var kitchenTemp = updateTemp(kitchenTemperature, kitchenCurrentTemp);\n      var bedroomTemp = updateTemp(bedroomTemperature, bedroomCurrentTemp);\n      var bathroomTemp = updateTemp(bathroomTemperature, bathroomCurrentTemp);\n      var livingroomTemp = updateTemp(livingroomTemperature, livingroomCurrentTemp);\n      var needUpdate = kitchenTemp.temp1 + bedroomTemp.temp1 + bathroomTemp.temp1 + livingroomTemp.temp1 !== kitchenTemp.temp2 + bedroomTemp.temp2 + bathroomTemp.temp2 + livingroomTemp.temp2;\n      console.log(\"needupdate?\", needUpdate);\n\n      if (needUpdate) {\n        count++;\n\n        if (parseInt(kitchenTemp.temp1) !== kitchenTemp.temp2) {\n          kitchenUsageCounter = 0.67 * 2;\n          this.setState({\n            kitchenUsuage: 2 * 0.67\n          });\n        }\n\n        if (parseInt(bedroomTemp.temp1) !== bedroomTemp.temp2) {\n          bedroomUsuageCounter = 2 * 2.22;\n          this.setState({\n            bedroomUsuage: 2 * 2.22\n          });\n        }\n\n        if (parseInt(bathroomTemp.temp1) !== bathroomTemp.temp2) {\n          bathroomUsageCounter = 2 * 0.44;\n          this.setState({\n            bathroomUsuage: 2 * 0.44\n          });\n        }\n\n        if (parseInt(livingroomTemp.temp1) !== livingroomTemp.temp2) {\n          livingroomUsageCounter = 2 * 1.67;\n          this.setState({\n            livingroomUsuage: 2 * 1.67\n          });\n        }\n\n        var usuageData = this.state.data;\n        totalUsuage = kitchenUsageCounter + bedroomUsuageCounter + bathroomUsageCounter + livingroomUsageCounter;\n        usuageData.push({\n          date: new Date(),\n          value: d3.randomNormal(totalUsuage, 0.2)()\n        });\n        usuageData.shift();\n        this.setState({\n          data: usuageData\n        });\n        console.log(\"count\", count);\n        console.log(\"totalUsuage\", totalUsuage);\n\n        if (count === 10) {\n          this.setState({\n            kitchenUsuage: 0.67,\n            bedroomUsuage: 2.22,\n            bathroomUsuage: 0.44,\n            livingroomUsuage: 1.67\n          });\n          clearInterval(this.updateUsuageInterval);\n        }\n      } else {\n        clearInterval(this.updateUsuageInterval);\n      }\n    }, 2000); // this.setState({\n    //   data:makeData(totalUsuage,0.2)\n    // })\n\n    this.showUsuageInterval = setInterval(() => {\n      var usuageData = this.state.data;\n      usuageData.push({\n        date: new Date(),\n        value: d3.randomNormal(5, 0.2)()\n      });\n      usuageData.shift();\n      this.setState({\n        data: usuageData\n      });\n    }, 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.updateUsuageInterval);\n    clearInterval(this.showUsuageInterval);\n  }\n\n  render() {\n    // const test = this.state.data\n    // console.log(test[test.length-1].value);\n    return React.createElement(\"div\", {\n      id: \"summary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, React.createElement(SettingsAlert, {\n      showWarning: this.state.showWarning,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"charts\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"line-chart\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, React.createElement(LineChart, {\n      width: 800,\n      height: 400,\n      data: this.state.data,\n      range: [2, 10],\n      title: 'Overall Energy Consumption',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      id: \"donut-chart\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, React.createElement(DonutChart, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      id: \"status-summary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      className: \"headline\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, \"Temperature Status\"), React.createElement(Room, {\n      roomName: \"Kitchen\",\n      type: \"temperature\",\n      showChart: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }), React.createElement(Room, {\n      roomName: \"Bedroom\",\n      type: \"temperature\",\n      showChart: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }), React.createElement(Room, {\n      roomName: \"Livingroom\",\n      type: \"temperature\",\n      showChart: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }), React.createElement(Room, {\n      roomName: \"Bathroom\",\n      type: \"temperature\",\n      showChart: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    })));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    kitchenTemperature: state.temperature.kitchenTemperature,\n    livingroomTemperature: state.temperature.livingroomTemperature,\n    bedroomTemperature: state.temperature.bedroomTemperature,\n    bathroomTemperature: state.temperature.bathroomTemperature,\n    livingroomCurrentTemp: state.temperature.livingroomCurrentTemp,\n    bedroomCurrentTemp: state.temperature.bedroomCurrentTemp,\n    bathroomCurrentTemp: state.temperature.bathroomCurrentTemp,\n    kitchenCurrentTemp: state.temperature.kitchenCurrentTemp\n  };\n};\n\nexport default connect(mapStateToProps)(Summary);","map":{"version":3,"sources":["/Users/langgao/Documents/HiberSense Dashboard/hibersense-dash/src/components/Summary/Summary.js"],"names":["React","Component","LineChart","DonutChart","makeData","SettingsAlert","connect","Room","d3","Summary","constructor","props","state","data","showWarning","kitchenUsuage","bedroomUsuage","bathroomUsuage","livingroomUsuage","componentWillMount","setState","componentDidMount","kitchenTemperature","livingroomTemperature","bathroomTemperature","bedroomTemperature","kitchenCurrentTemp","bedroomCurrentTemp","bathroomCurrentTemp","livingroomCurrentTemp","updateTemp","tempTarget","currentTemp","temp1","temperature","temp2","console","log","parseInt","count","totalUsuage","kitchenUsageCounter","bedroomUsuageCounter","bathroomUsageCounter","livingroomUsageCounter","updateUsuageInterval","setInterval","kitchenTemp","bedroomTemp","bathroomTemp","livingroomTemp","needUpdate","usuageData","push","date","Date","value","randomNormal","shift","clearInterval","showUsuageInterval","componentWillUnmount","render","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport LineChart from '../LineChart/LineChart';\nimport DonutChart from '../DonutChart/DonutChart';\nimport {makeData} from '../Utility/DataHandling';\nimport './summary.css';\nimport {SettingsAlert} from '../Utility/Alert';\nimport { connect } from 'react-redux';\nimport Room from '../Rooms/Room';\nimport * as d3 from 'd3';\n\n\nclass Summary extends Component {\n  constructor(props){\n    super(props);\n    this.state={\n      data:{},\n      showWarning:false,\n      kitchenUsuage:0.67,\n      bedroomUsuage:2.22,\n      bathroomUsuage:0.44,\n      livingroomUsuage:1.67\n    }\n  }\n\n\n  componentWillMount(){\n    this.setState({\n      data:makeData(5,0.2)\n    })\n\n    // this.loadData = setInterval(() => {\n    //   const data = makeData(1.5,0.2);\n    //   this.setState({\n    //     data:data\n    //   })\n    // }, 1000);\n  }\n\n  componentDidMount(){\n    const {\n\n      kitchenTemperature,\n      livingroomTemperature,\n      bathroomTemperature,\n      bedroomTemperature,\n\n      kitchenCurrentTemp,\n      bedroomCurrentTemp,\n      bathroomCurrentTemp,\n      livingroomCurrentTemp,  \n    } = this.props;\n\n    const{kitchenUsuage,\n      bedroomUsuage,\n      bathroomUsuage,\n      livingroomUsuage} = this.state;\n\n    const updateTemp =(tempTarget,currentTemp)=>{\n      return{\n        temp1: typeof tempTarget === \"number\"? tempTarget: tempTarget.temperature,\n        temp2: typeof currentTemp === \"number\"? currentTemp: currentTemp.temperature\n      }\n    }\n\n    console.log(\"checking...\",parseInt(updateTemp(kitchenTemperature,kitchenCurrentTemp).temp1));\n    var count=1\n    var totalUsuage = 5;\n    var kitchenUsageCounter = 0.67;\n    var bedroomUsuageCounter = 2.22;\n    var bathroomUsageCounter =0.44;\n    var livingroomUsageCounter = 1.67;\n\n    this.updateUsuageInterval = setInterval(()=>{\n      var kitchenTemp = updateTemp(kitchenTemperature,kitchenCurrentTemp);\n      var bedroomTemp = updateTemp(bedroomTemperature,bedroomCurrentTemp);\n      var bathroomTemp = updateTemp(bathroomTemperature,bathroomCurrentTemp);\n      var livingroomTemp = updateTemp(livingroomTemperature,livingroomCurrentTemp);\n      var needUpdate = (kitchenTemp.temp1+bedroomTemp.temp1+bathroomTemp.temp1+livingroomTemp.temp1)!==\n                        (kitchenTemp.temp2+bedroomTemp.temp2+bathroomTemp.temp2+livingroomTemp.temp2)\n\n      console.log(\"needupdate?\", needUpdate)\n      if(needUpdate){\n          count++;\n          if(parseInt(kitchenTemp.temp1)!==kitchenTemp.temp2) {\n            kitchenUsageCounter=0.67*2;\n            this.setState({kitchenUsuage:2*0.67})\n          }\n          if(parseInt(bedroomTemp.temp1)!==bedroomTemp.temp2){\n            bedroomUsuageCounter=2*2.22;\n            this.setState({bedroomUsuage:2*2.22})\n          } \n          if(parseInt(bathroomTemp.temp1)!==bathroomTemp.temp2) {\n            bathroomUsageCounter=2*0.44;\n            this.setState({bathroomUsuage:2*0.44})\n          }\n          if(parseInt(livingroomTemp.temp1)!==livingroomTemp.temp2){\n            livingroomUsageCounter=2*1.67;\n            this.setState({livingroomUsuage:2*1.67})\n          } \n\n          var usuageData = this.state.data;\n          totalUsuage = kitchenUsageCounter+bedroomUsuageCounter+bathroomUsageCounter+livingroomUsageCounter\n          usuageData.push({date:new Date(),value:d3.randomNormal(totalUsuage, 0.2)()});\n          usuageData.shift();\n          this.setState({\n            data:usuageData\n          })\n\n          console.log(\"count\",count)   \n          console.log(\"totalUsuage\",totalUsuage)   \n          if(count === 10){\n            this.setState({\n              kitchenUsuage:0.67,\n              bedroomUsuage:2.22,\n              bathroomUsuage:0.44,\n              livingroomUsuage:1.67\n            })\n            clearInterval(this.updateUsuageInterval);\n          }\n\n      }else{\n        clearInterval(this.updateUsuageInterval);\n      } \n\n    },2000)\n\n\n    \n    // this.setState({\n    //   data:makeData(totalUsuage,0.2)\n    // })\n\n    this.showUsuageInterval=setInterval(\n      ()=>{\n        var usuageData = this.state.data;\n        usuageData.push({date:new Date(),value:d3.randomNormal(5, 0.2)()});\n        usuageData.shift();\n        this.setState({\n          data:usuageData\n        })\n      },1000\n    )\n\n  }\n\n  componentWillUnmount(){\n    clearInterval(this.updateUsuageInterval);\n    clearInterval(this.showUsuageInterval);\n  }\n\n\n  render() {\n    // const test = this.state.data\n    // console.log(test[test.length-1].value);\n    return (\n      <div id='summary'>\n            <SettingsAlert showWarning={this.state.showWarning}/>\n            <div id='charts'>\n              <div id=\"line-chart\">\n                <LineChart\n                    width={800} \n                    height={400}\n                    data = {this.state.data}\n                    range={[2,10]}\n                    title={'Overall Energy Consumption'}\n                />\n              </div>\n              <div id='donut-chart'><DonutChart /></div>\n            </div>\n\n          <div id=\"status-summary\">\n            <h2 className='headline'>Temperature Status</h2>\n            <Room roomName={\"Kitchen\"} type=\"temperature\" showChart={false}/>\n            <Room roomName={\"Bedroom\"} type=\"temperature\" showChart={false}/>\n            <Room roomName={\"Livingroom\"} type=\"temperature\" showChart={false}/>\n            <Room roomName={\"Bathroom\"} type=\"temperature\" showChart={false}/>\n          </div>\n\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps=state=>{\n  return{\n    kitchenTemperature: state.temperature.kitchenTemperature,\n    livingroomTemperature: state.temperature.livingroomTemperature,\n    bedroomTemperature: state.temperature.bedroomTemperature,\n    bathroomTemperature: state.temperature.bathroomTemperature,\n\n    livingroomCurrentTemp:state.temperature.livingroomCurrentTemp,\n    bedroomCurrentTemp:state.temperature.bedroomCurrentTemp,\n    bathroomCurrentTemp:state.temperature.bathroomCurrentTemp,\n    kitchenCurrentTemp:state.temperature.kitchenCurrentTemp,\n  }\n}\n\nexport default connect(mapStateToProps)(Summary);"]},"metadata":{},"sourceType":"module"}