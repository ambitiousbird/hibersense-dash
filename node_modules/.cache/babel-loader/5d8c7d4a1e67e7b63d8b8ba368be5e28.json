{"ast":null,"code":"var _jsxFileName = \"/Users/langgao/Documents/HiberSense Dashboard/hibersense-dash/src/components/LineChart/Temperature.js\";\nimport React, { Component } from 'react';\nimport * as d3 from 'd3';\nimport { loadAllData } from \"./DataHandling\";\nexport default class Temperature extends Component {\n  constructor() {\n    super();\n    this.state = {\n      data: null\n    };\n  }\n\n  componentWillMount() {\n    this.load();\n  }\n\n  load() {\n    loadAllData(this.loaded.bind(this));\n    setTimeout(() => {\n      this.load();\n    }, 1000);\n  }\n\n  loaded(data) {\n    this.setState({\n      data: data\n    });\n  }\n\n  componentDidMount() {\n    const data = this.state.data;\n    console.log(data); // set the dimensions and margins of the graph\n\n    var margin = {\n      top: 10,\n      right: 30,\n      bottom: 30,\n      left: 60\n    },\n        width = 460 - margin.left - margin.right,\n        height = 400 - margin.top - margin.bottom; // append the svg object to the body of the page\n\n    var svg = d3.select(\"#my_dataviz\").append(\"svg\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom).append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\"); // //Read the data\n    // d3.csv(\"https://raw.githubusercontent.com/holtzy/D3-graph-gallery/master/DATA/connectedscatter.csv\",\n    // // When reading the csv, I must format variables:\n    // function(d){\n    //     return { date : d3.timeParse(\"%Y-%m-%d\")(d.date), value : d.value }\n    // },\n    // Now I can use this dataset:\n    // function(data) {\n    // Add X axis --> it is a date format\n\n    var x = d3.scaleTime().domain(d3.extent(data, function (d) {\n      return d.date;\n    })).range([0, width]);\n    svg.append(\"g\").attr(\"transform\", \"translate(0,\" + height + \")\").call(d3.axisBottom(x)); // Add Y axis\n\n    var y = d3.scaleLinear().domain([8000, 9200]).range([height, 0]);\n    svg.append(\"g\").call(d3.axisLeft(y)); // Add the line\n\n    svg.append(\"path\").datum(data).attr(\"fill\", \"none\").attr(\"stroke\", \"black\").attr(\"stroke-width\", 1.5).attr(\"d\", d3.line().curve(d3.curveBasis) // Just add that to have a curve instead of segments\n    .x(function (d) {\n      return x(d.date);\n    }).y(function (d) {\n      return y(d.value);\n    })); // create a tooltip\n\n    var Tooltip = d3.select(\"#my_dataviz\").append(\"div\").style(\"opacity\", 0).attr(\"class\", \"tooltip\").style(\"background-color\", \"white\").style(\"border\", \"solid\").style(\"border-width\", \"2px\").style(\"border-radius\", \"5px\").style(\"padding\", \"5px\");\n    console.log(Tooltip); // Three function that change the tooltip when user hover / move / leave a cell\n\n    var mouseover = function (d) {\n      Tooltip.style(\"opacity\", 1);\n    };\n\n    var mousemove = function (d) {\n      Tooltip.html(\"Exact value: \" + d.value).style(\"left\", d3.mouse(this)[0] + 70 + \"px\").style(\"top\", d3.mouse(this)[1] + \"px\");\n    };\n\n    var mouseleave = function (d) {\n      Tooltip.style(\"opacity\", 0);\n    }; // Add the points\n\n\n    svg.append(\"g\").selectAll(\"dot\").data(data).enter().append(\"circle\").attr(\"class\", \"myCircle\").attr(\"cx\", function (d) {\n      return x(d.date);\n    }).attr(\"cy\", function (d) {\n      return y(d.value);\n    }).attr(\"r\", 8).attr(\"stroke\", \"#69b3a2\").attr(\"stroke-width\", 3).attr(\"fill\", \"white\").on(\"mouseover\", mouseover).on(\"mousemove\", mousemove).on(\"mouseleave\", mouseleave);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"my_dataviz\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/langgao/Documents/HiberSense Dashboard/hibersense-dash/src/components/LineChart/Temperature.js"],"names":["React","Component","d3","loadAllData","Temperature","constructor","state","data","componentWillMount","load","loaded","bind","setTimeout","setState","componentDidMount","console","log","margin","top","right","bottom","left","width","height","svg","select","append","attr","x","scaleTime","domain","extent","d","date","range","call","axisBottom","y","scaleLinear","axisLeft","datum","line","curve","curveBasis","value","Tooltip","style","mouseover","mousemove","html","mouse","mouseleave","selectAll","enter","on","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport * as d3 from 'd3';\nimport { loadAllData } from \"./DataHandling\";\n\nexport default class Temperature extends Component {\n    constructor() {\n        super();\n    \n        this.state = {\n          data: null,\n        };\n    }\n\n    componentWillMount() {\n        this.load();\n    }\n\n    load() {\n        loadAllData(this.loaded.bind(this));\n    \n        setTimeout(() => {\n          this.load();\n        }, 1000);\n      }\n    \n      loaded(data) {\n        this.setState({ data: data });\n    }\n\n    componentDidMount(){\n\n        const data=this.state.data;\n        console.log(data);\n        // set the dimensions and margins of the graph\n        var margin = {top: 10, right: 30, bottom: 30, left: 60},\n            width = 460 - margin.left - margin.right,\n            height = 400 - margin.top - margin.bottom;\n\n        // append the svg object to the body of the page\n        var svg = d3.select(\"#my_dataviz\")\n        .append(\"svg\")\n            .attr(\"width\", width + margin.left + margin.right)\n            .attr(\"height\", height + margin.top + margin.bottom)\n        .append(\"g\")\n            .attr(\"transform\",\n                \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n        // //Read the data\n        // d3.csv(\"https://raw.githubusercontent.com/holtzy/D3-graph-gallery/master/DATA/connectedscatter.csv\",\n\n        // // When reading the csv, I must format variables:\n        // function(d){\n        //     return { date : d3.timeParse(\"%Y-%m-%d\")(d.date), value : d.value }\n        // },\n\n        // Now I can use this dataset:\n        // function(data) {\n\n            // Add X axis --> it is a date format\n            var x = d3.scaleTime()\n            .domain(d3.extent(data, function(d) { return d.date; }))\n            .range([ 0, width ]);\n            svg.append(\"g\")\n            .attr(\"transform\", \"translate(0,\" + height + \")\")\n            .call(d3.axisBottom(x));\n\n            // Add Y axis\n            var y = d3.scaleLinear()\n            .domain( [8000, 9200])\n            .range([ height, 0 ]);\n            svg.append(\"g\")\n            .call(d3.axisLeft(y));\n\n            // Add the line\n            svg.append(\"path\")\n            .datum(data)\n            .attr(\"fill\", \"none\")\n            .attr(\"stroke\", \"black\")\n            .attr(\"stroke-width\", 1.5)\n            .attr(\"d\", d3.line()\n                .curve(d3.curveBasis) // Just add that to have a curve instead of segments\n                .x(function(d) { return x(d.date) })\n                .y(function(d) { return y(d.value) })\n                )\n\n            // create a tooltip\n            var Tooltip = d3.select(\"#my_dataviz\")\n            .append(\"div\")\n            .style(\"opacity\", 0)\n            .attr(\"class\", \"tooltip\")\n            .style(\"background-color\", \"white\")\n            .style(\"border\", \"solid\")\n            .style(\"border-width\", \"2px\")\n            .style(\"border-radius\", \"5px\")\n            .style(\"padding\", \"5px\")\n\n            console.log(Tooltip);\n            // Three function that change the tooltip when user hover / move / leave a cell\n            var mouseover = function(d) {\n                Tooltip\n                .style(\"opacity\", 1)\n            }\n            var mousemove = function(d) {\n                Tooltip\n                .html(\"Exact value: \" + d.value)\n                .style(\"left\", (d3.mouse(this)[0]+70) + \"px\")\n                .style(\"top\", (d3.mouse(this)[1]) + \"px\")\n            }\n            var mouseleave = function(d) {\n                Tooltip\n                .style(\"opacity\", 0)\n            }\n\n            // Add the points\n            svg\n            .append(\"g\")\n            .selectAll(\"dot\")\n            .data(data)\n            .enter()\n            .append(\"circle\")\n                .attr(\"class\", \"myCircle\")\n                .attr(\"cx\", function(d) { return x(d.date) } )\n                .attr(\"cy\", function(d) { return y(d.value) } )\n                .attr(\"r\", 8)\n                .attr(\"stroke\", \"#69b3a2\")\n                .attr(\"stroke-width\", 3)\n                .attr(\"fill\", \"white\")\n                .on(\"mouseover\", mouseover)\n                .on(\"mousemove\", mousemove)\n                .on(\"mouseleave\", mouseleave)\n        \n    }\n\n\n  render() {\n    return (\n      <div id=\"my_dataviz\">\n        \n      </div>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}