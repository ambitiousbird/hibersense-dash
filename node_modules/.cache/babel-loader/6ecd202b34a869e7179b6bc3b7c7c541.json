{"ast":null,"code":"var _jsxFileName = \"/Users/langgao/Documents/HiberSense Dashboard/hibersense-dash/src/components/LineChart/PlotChart.js\";\nimport React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport { XAxis, YAxis, YGrid, Line } from \"./ChartComponents.js\";\n\nclass PlotChart extends Component {\n  constructor(props) {\n    super();\n  }\n\n  updateScale(props) {\n    const data = props.data;\n    const xScale = d3.scaleTime();\n    const yScale = d3.scaleLinear().nice();\n    const xDomain = d3.extent(data, d => d.date);\n    const yDomain = props.yDomain || [0, d3.max(data, d => props.yFn(d))];\n    xScale.domain(xDomain).range([0, props.width - (props.margin.left + props.margin.right)]);\n    yScale.domain(yDomain).range([props.height - (props.margin.top + props.margin.bottom), 0]);\n    return {\n      xScale,\n      yScale\n    };\n  }\n\n  updatePlotSize(props) {\n    const plotWidth = props.width - (props.margin.left + props.margin.right);\n    const plotHeight = props.height - (props.margin.top + props.margin.bottom);\n    return {\n      plotWidth,\n      plotHeight\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const newData = nextProps.data;\n\n    if (this.props.data !== newData) {\n      d3.selectAll(\"circle\").transition().duration(300).remove();\n      ;\n    }\n  }\n\n  render() {\n    const _this$updateScale = this.updateScale(this.props),\n          xScale = _this$updateScale.xScale,\n          yScale = _this$updateScale.yScale;\n\n    const _this$updatePlotSize = this.updatePlotSize(this.props),\n          plotWidth = _this$updatePlotSize.plotWidth,\n          plotHeight = _this$updatePlotSize.plotHeight;\n\n    const metaData = {\n      xScale: xScale,\n      yScale: yScale,\n      plotWidth: plotWidth,\n      plotHeight: plotHeight,\n      xSlide: -xScale(this.props.xFn(this.props.data[1]))\n    };\n    const plotData = {\n      plotData: this.props.data.map((d, i) => {\n        return {\n          id: i,\n          data: d,\n          x: xScale(this.props.xFn(d)),\n          y: yScale(this.props.yFn(d))\n        };\n      })\n    };\n    return React.createElement(\"svg\", {\n      width: this.props.width,\n      height: this.props.height,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(\"g\", {\n      className: \"axisLayer\",\n      width: plotWidth,\n      height: plotHeight,\n      transform: \"translate(\".concat(this.props.margin.left, \", \").concat(this.props.margin.top, \")\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(YGrid, Object.assign({}, metaData, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    })), React.createElement(XAxis, Object.assign({}, metaData, {\n      transform: \"translate(0,\".concat(plotHeight, \")\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    })), React.createElement(YAxis, Object.assign({}, metaData, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }))), React.createElement(\"g\", {\n      className: \"plotLayer\",\n      width: plotWidth,\n      height: plotHeight,\n      transform: \"translate(\".concat(this.props.margin.left, \", \").concat(this.props.margin.top, \")\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, React.createElement(Line, Object.assign({}, metaData, plotData, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default PlotChart;","map":{"version":3,"sources":["/Users/langgao/Documents/HiberSense Dashboard/hibersense-dash/src/components/LineChart/PlotChart.js"],"names":["React","Component","d3","XAxis","YAxis","YGrid","Line","PlotChart","constructor","props","updateScale","data","xScale","scaleTime","yScale","scaleLinear","nice","xDomain","extent","d","date","yDomain","max","yFn","domain","range","width","margin","left","right","height","top","bottom","updatePlotSize","plotWidth","plotHeight","componentWillReceiveProps","nextProps","newData","selectAll","transition","duration","remove","render","metaData","xSlide","xFn","plotData","map","i","id","x","y"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport { XAxis, YAxis, YGrid, Line } from \"./ChartComponents.js\";\n\nclass PlotChart extends Component {\n  constructor(props) {\n    super();\n  }\n\n  updateScale(props) {\n    const data = props.data;\n    const xScale = d3.scaleTime();\n    const yScale = d3.scaleLinear().nice();\n\n    const xDomain = d3.extent(data, d => d.date);\n    const yDomain = props.yDomain || [0, d3.max(data, d => props.yFn(d))];\n\n    xScale\n      .domain(xDomain)\n      .range([0, props.width - (props.margin.left + props.margin.right)]);\n\n    \n    yScale\n      .domain(yDomain)\n      .range([props.height - (props.margin.top + props.margin.bottom), 0]);\n      \n      return {xScale, yScale}\n  }\n  \n  updatePlotSize(props){\n    const plotWidth =\n      props.width - (props.margin.left + props.margin.right);\n    const plotHeight =\n      props.height - (props.margin.top + props.margin.bottom);\n      \n      return {plotWidth, plotHeight}\n    \n    \n  }\n  \n  componentWillReceiveProps(nextProps) {\n    const newData = nextProps.data;\n    if (this.props.data !== newData) {\n      d3.selectAll(\"circle\")\n      .transition()\n      .duration(300)\n      .remove();;\n    }\n  }\n\n  render() {\n\n    const {xScale, yScale} =  this.updateScale(this.props);\n\n    const {plotWidth, plotHeight} = this.updatePlotSize(this.props);\n      \n    const metaData = {\n      xScale: xScale,\n      yScale: yScale,\n      plotWidth: plotWidth,\n      plotHeight: plotHeight,\n      xSlide: -xScale(this.props.xFn(this.props.data[1]))\n    };\n    const plotData = {\n      plotData: this.props.data.map((d, i) => {\n        return {\n          id: i,\n          data: d,\n          x: xScale(this.props.xFn(d)),\n          y: yScale(this.props.yFn(d))\n        };\n      })\n    };\n\n    return (\n      \n      <svg width={this.props.width} height={this.props.height}>\n        <g\n          className=\"axisLayer\"\n          width={plotWidth}\n          height={plotHeight}\n          transform={`translate(${this.props.margin.left}, ${this.props.margin\n            .top})`}\n        >\n          <YGrid {...metaData} />\n          <XAxis {...metaData} transform={`translate(0,${plotHeight})`} />\n          <YAxis {...metaData} />\n        </g>\n        <g\n          className=\"plotLayer\"\n          width={plotWidth}\n          height={plotHeight}\n          transform={`translate(${this.props.margin.left}, ${this.props.margin\n            .top})`}\n        >\n          <Line {...metaData} {...plotData} />\n        </g>\n      </svg>\n    );\n  }\n}\n\nexport default PlotChart;\n"]},"metadata":{},"sourceType":"module"}