{"ast":null,"code":"var _jsxFileName = \"/Users/langgao/Documents/HiberSense Dashboard/hibersense-dash/src/components/Summary/Summary.js\";\nimport React, { Component } from 'react';\nimport LineChart from '../LineChart/LineChart';\nimport DonutChart from '../DonutChart/DonutChart';\nimport { makeData } from '../Utility/DataHandling';\nimport './summary.css';\nimport { SettingsAlert } from '../Utility/Alert';\nimport { connect } from 'react-redux';\nimport Room from '../Rooms/Room';\n\nclass Summary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: {},\n      showWarning: false,\n      kitchenUsuage: 0.67,\n      bedroomUsuage: 2.22,\n      bathroomUsuage: 0.44,\n      livingroomUsuage: 1.67\n    };\n  }\n\n  componentWillMount() {\n    this.setState({\n      data: makeData(1.5, 0.2)\n    });\n    this.loadData = setInterval(() => {\n      const data = makeData(1.5, 0.2);\n      this.setState({\n        data: data\n      });\n    }, 1000);\n  }\n\n  componentDidMount() {\n    const _this$props = this.props,\n          kitchenTemperature = _this$props.kitchenTemperature,\n          livingroomTemperature = _this$props.livingroomTemperature,\n          bathroomTemperature = _this$props.bathroomTemperature,\n          bedroomTemperature = _this$props.bedroomTemperature,\n          kitchenCurrentTemp = _this$props.kitchenCurrentTemp,\n          bedroomCurrentTemp = _this$props.bedroomCurrentTemp,\n          bathroomCurrentTemp = _this$props.bathroomCurrentTemp,\n          livingroomCurrentTemp = _this$props.livingroomCurrentTemp;\n\n    const updateTemp = (tempTarget, currentTemp) => {\n      return {\n        temp1: typeof tempTarget === \"number\" ? tempTarget : tempTarget.temperature,\n        temp2: typeof currentTemp === \"number\" ? currentTemp : currentTemp.temperature\n      };\n    };\n\n    console.log(\"checking...\", updateTemp(kitchenTemperature, kitchenCurrentTemp));\n    this.changeTempInterval = setInterval(() => {\n      var kitchenTemp = updateTemp(kitchenTemperature, kitchenCurrentTemp);\n      var bedroomTemp = updateTemp(bedroomTemperature, bedroomCurrentTemp);\n      var bathroomTemp = updateTemp(bathroomTemperature, bathroomCurrentTemp);\n      var livingroomTemp = updateTemp(livingroomTemperature, livingroomCurrentTemp);\n      var needUpdate = kitchenTemp.temp1 + bedroomTemp.temp1 + bathroomTemp.temp1 + livingroomTemp.temp1 === kitchenTemp.temp2 + bedroomTemp.temp2 + bathroomTemp.temp2 + livingroomTemp.temp2;\n\n      if (needUpdate) {\n        if (roomName === \"Kitchen\") {\n          currentTemp = Math.round((currentTemp + tempDiff / 10) * 10) / 10;\n          changeKitchenTemp(currentTemp);\n          var kitchenData = this.state.temperatureData;\n          kitchenData.push({\n            date: new Date(),\n            value: d3.randomNormal(currentTemp, 0.2)()\n          });\n          kitchenData.shift();\n          this.setState({\n            temperatureData: kitchenData\n          });\n          console.log(\"this.state.kitchenData\", this.state.kitchenData);\n        }\n\n        if (roomName === \"Bedroom\") {\n          currentTemp = Math.round((currentTemp + tempDiff / 10) * 10) / 10;\n          changeBedroomTemp(currentTemp);\n          var bedroomData = this.state.temperatureData;\n          bedroomData.push({\n            date: new Date(),\n            value: d3.randomNormal(currentTemp, 0.2)()\n          });\n          bedroomData.shift();\n          this.setState({\n            temperatureData: bedroomData\n          });\n        }\n\n        if (roomName === \"Bathroom\") {\n          currentTemp = Math.round((currentTemp + tempDiff / 10) * 10) / 10;\n          changeBathroomTemp(currentTemp);\n          var bathroomData = this.state.temperatureData;\n          bathroomData.push({\n            date: new Date(),\n            value: d3.randomNormal(currentTemp, 0.2)()\n          });\n          bathroomData.shift();\n          this.setState({\n            temperatureData: bathroomData\n          });\n        }\n\n        if (roomName === \"Livingroom\") {\n          currentTemp = Math.round((currentTemp + tempDiff / 10) * 10) / 10;\n          changeLivingroomTemp(currentTemp);\n          var livingroomData = this.state.temperatureData;\n          livingroomData.push({\n            date: new Date(),\n            value: d3.randomNormal(currentTemp, 0.2)()\n          });\n          livingroomData.shift();\n          this.setState({\n            temperatureData: livingroomData\n          });\n        }\n\n        tempTarget = Math.round(tempTarget * 10) / 10;\n\n        if (currentTemp === tempTarget) {\n          clearInterval(this.changeTempInterval);\n        }\n      }\n    }, 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.changeTempInterval);\n  }\n\n  render() {\n    // const test = this.state.data\n    // console.log(test[test.length-1].value);\n    return React.createElement(\"div\", {\n      id: \"summary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, React.createElement(SettingsAlert, {\n      showWarning: this.state.showWarning,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"charts\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"line-chart\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, React.createElement(LineChart, {\n      width: 800,\n      height: 400,\n      data: this.state.data,\n      range: [0, 3],\n      title: 'Overall Energy Consumption',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      id: \"donut-chart\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, React.createElement(DonutChart, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      id: \"status-summary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      className: \"headline\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, \"Temperature Status\"), React.createElement(Room, {\n      roomName: \"Kitchen\",\n      type: \"temperature\",\n      showChart: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }), React.createElement(Room, {\n      roomName: \"Bedroom\",\n      type: \"temperature\",\n      showChart: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }), React.createElement(Room, {\n      roomName: \"Livingroom\",\n      type: \"temperature\",\n      showChart: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }), React.createElement(Room, {\n      roomName: \"Bathroom\",\n      type: \"temperature\",\n      showChart: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    })));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    kitchenTemperature: state.temperature.kitchenTemperature,\n    livingroomTemperature: state.temperature.livingroomTemperature,\n    bedroomTemperature: state.temperature.bedroomTemperature,\n    bathroomTemperature: state.temperature.bathroomTemperature,\n    livingroomCurrentTemp: state.temperature.livingroomCurrentTemp,\n    bedroomCurrentTemp: state.temperature.bedroomCurrentTemp,\n    bathroomCurrentTemp: state.temperature.bathroomCurrentTemp,\n    kitchenCurrentTemp: state.temperature.kitchenCurrentTemp\n  };\n};\n\nexport default connect(mapStateToProps)(Summary);","map":{"version":3,"sources":["/Users/langgao/Documents/HiberSense Dashboard/hibersense-dash/src/components/Summary/Summary.js"],"names":["React","Component","LineChart","DonutChart","makeData","SettingsAlert","connect","Room","Summary","constructor","props","state","data","showWarning","kitchenUsuage","bedroomUsuage","bathroomUsuage","livingroomUsuage","componentWillMount","setState","loadData","setInterval","componentDidMount","kitchenTemperature","livingroomTemperature","bathroomTemperature","bedroomTemperature","kitchenCurrentTemp","bedroomCurrentTemp","bathroomCurrentTemp","livingroomCurrentTemp","updateTemp","tempTarget","currentTemp","temp1","temperature","temp2","console","log","changeTempInterval","kitchenTemp","bedroomTemp","bathroomTemp","livingroomTemp","needUpdate","roomName","Math","round","tempDiff","changeKitchenTemp","kitchenData","temperatureData","push","date","Date","value","d3","randomNormal","shift","changeBedroomTemp","bedroomData","changeBathroomTemp","bathroomData","changeLivingroomTemp","livingroomData","clearInterval","componentWillUnmount","render","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport LineChart from '../LineChart/LineChart';\nimport DonutChart from '../DonutChart/DonutChart';\nimport {makeData} from '../Utility/DataHandling';\nimport './summary.css';\nimport {SettingsAlert} from '../Utility/Alert';\nimport { connect } from 'react-redux';\nimport Room from '../Rooms/Room';\n\n\nclass Summary extends Component {\n  constructor(props){\n    super(props);\n    this.state={\n      data:{},\n      showWarning:false,\n      kitchenUsuage:0.67,\n      bedroomUsuage:2.22,\n      bathroomUsuage:0.44,\n      livingroomUsuage:1.67\n    }\n  }\n\n\n  componentWillMount(){\n    this.setState({\n      data:makeData(1.5,0.2)\n    })\n\n    this.loadData = setInterval(() => {\n      const data = makeData(1.5,0.2);\n      this.setState({\n        data:data\n      })\n    }, 1000);\n  }\n\n  componentDidMount(){\n    const {\n\n      kitchenTemperature,\n      livingroomTemperature,\n      bathroomTemperature,\n      bedroomTemperature,\n\n      kitchenCurrentTemp,\n      bedroomCurrentTemp,\n      bathroomCurrentTemp,\n      livingroomCurrentTemp,  \n    } = this.props;\n\n    const updateTemp =(tempTarget,currentTemp)=>{\n      return{\n        temp1: typeof tempTarget === \"number\"? tempTarget: tempTarget.temperature,\n        temp2: typeof currentTemp === \"number\"? currentTemp: currentTemp.temperature\n      }\n    }\n\n    console.log(\"checking...\",updateTemp(kitchenTemperature,kitchenCurrentTemp));\n    this.changeTempInterval = setInterval(()=>{\n      var kitchenTemp = updateTemp(kitchenTemperature,kitchenCurrentTemp);\n      var bedroomTemp = updateTemp(bedroomTemperature,bedroomCurrentTemp);\n      var bathroomTemp = updateTemp(bathroomTemperature,bathroomCurrentTemp);\n      var livingroomTemp = updateTemp(livingroomTemperature,livingroomCurrentTemp);\n      var needUpdate = (kitchenTemp.temp1+bedroomTemp.temp1+bathroomTemp.temp1+livingroomTemp.temp1)===\n                        (kitchenTemp.temp2+bedroomTemp.temp2+bathroomTemp.temp2+livingroomTemp.temp2)\n\n\n      if(needUpdate){\n        if(roomName===\"Kitchen\") {\n\n          currentTemp=Math.round((currentTemp+tempDiff/10)*10)/10;\n          changeKitchenTemp(currentTemp);\n          var kitchenData = this.state.temperatureData;\n\n          kitchenData.push({date:new Date(),value:d3.randomNormal(currentTemp, 0.2)()});\n          kitchenData.shift();\n          this.setState({\n            temperatureData:kitchenData\n          })\n          console.log(\"this.state.kitchenData\",this.state.kitchenData);\n        }\n        if(roomName===\"Bedroom\") {\n          currentTemp=Math.round((currentTemp+tempDiff/10)*10)/10;\n          changeBedroomTemp(currentTemp);\n          var bedroomData = this.state.temperatureData;\n          bedroomData.push({date:new Date(),value:d3.randomNormal(currentTemp, 0.2)()});\n          bedroomData.shift();\n          this.setState({\n            temperatureData:bedroomData\n          })\n        }\n        if(roomName===\"Bathroom\") {\n          currentTemp=Math.round((currentTemp+tempDiff/10)*10)/10;\n          changeBathroomTemp(currentTemp);\n          var bathroomData = this.state.temperatureData;\n          bathroomData.push({date:new Date(),value:d3.randomNormal(currentTemp, 0.2)()});\n          bathroomData.shift();\n          this.setState({\n            temperatureData:bathroomData\n          })\n        }\n        if(roomName===\"Livingroom\") {\n          currentTemp=Math.round((currentTemp+tempDiff/10)*10)/10;\n          changeLivingroomTemp(currentTemp);\n          var livingroomData = this.state.temperatureData;\n          livingroomData.push({date:new Date(),value:d3.randomNormal(currentTemp, 0.2)()});\n          livingroomData.shift();\n          this.setState({\n            temperatureData:livingroomData\n          })\n        }\n  \n        tempTarget = Math.round(tempTarget*10)/10;\n        \n        if(currentTemp === tempTarget){\n          clearInterval(this.changeTempInterval);\n        }\n      }\n    },1000)\n\n  }\n\n  componentWillUnmount(){\n    clearInterval(this.changeTempInterval);\n  }\n\n\n  render() {\n    // const test = this.state.data\n    // console.log(test[test.length-1].value);\n\n    return (\n      <div id='summary'>\n            <SettingsAlert showWarning={this.state.showWarning}/>\n            <div id='charts'>\n              <div id=\"line-chart\">\n                <LineChart\n                    width={800} \n                    height={400}\n                    data = {this.state.data}\n                    range={[0,3]}\n                    title={'Overall Energy Consumption'}\n                />\n              </div>\n              <div id='donut-chart'><DonutChart /></div>\n            </div>\n\n          <div id=\"status-summary\">\n            <h2 className='headline'>Temperature Status</h2>\n            <Room roomName={\"Kitchen\"} type=\"temperature\" showChart={false}/>\n            <Room roomName={\"Bedroom\"} type=\"temperature\" showChart={false}/>\n            <Room roomName={\"Livingroom\"} type=\"temperature\" showChart={false}/>\n            <Room roomName={\"Bathroom\"} type=\"temperature\" showChart={false}/>\n          </div>\n\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps=state=>{\n  return{\n    kitchenTemperature: state.temperature.kitchenTemperature,\n    livingroomTemperature: state.temperature.livingroomTemperature,\n    bedroomTemperature: state.temperature.bedroomTemperature,\n    bathroomTemperature: state.temperature.bathroomTemperature,\n\n    livingroomCurrentTemp:state.temperature.livingroomCurrentTemp,\n    bedroomCurrentTemp:state.temperature.bedroomCurrentTemp,\n    bathroomCurrentTemp:state.temperature.bathroomCurrentTemp,\n    kitchenCurrentTemp:state.temperature.kitchenCurrentTemp,\n  }\n}\n\nexport default connect(mapStateToProps)(Summary);"]},"metadata":{},"sourceType":"module"}