{"ast":null,"code":"var _jsxFileName = \"/Users/langgao/Documents/HiberSense Dashboard/hibersense-dash/src/components/Rooms/Room.js\";\nimport React, { Component } from 'react';\nimport LineChart from '../LineChart/LineChart';\nimport { connect } from 'react-redux';\nimport { makeData } from '../Utility/DataHandling';\nimport * as d3 from \"d3\";\nimport { changeBathroomTemp, changeLivingroomTemp, changeKitchenTemp, changeBedroomTemp, setLivingroomStatus, setKitchenStatus, setBathroomStatus, setBedroomStatus, setLivingroomTempData, setBedroomTempData, setBathroomTempData, setKitchenTempData } from '../store/actions/temperatureSettingAction';\n\nclass Room extends Component {\n  constructor(props) {\n    super();\n  }\n\n  componentDidMount() {\n    const _this$props = this.props,\n          roomName = _this$props.roomName,\n          kitchenTemperature = _this$props.kitchenTemperature,\n          livingroomTemperature = _this$props.livingroomTemperature,\n          bathroomTemperature = _this$props.bathroomTemperature,\n          bedroomTemperature = _this$props.bedroomTemperature,\n          kitchenCurrentTemp = _this$props.kitchenCurrentTemp,\n          bedroomCurrentTemp = _this$props.bedroomCurrentTemp,\n          bathroomCurrentTemp = _this$props.bathroomCurrentTemp,\n          livingroomCurrentTemp = _this$props.livingroomCurrentTemp,\n          livingroomTempData = _this$props.livingroomTempData,\n          bedroomTempData = _this$props.bedroomTempData,\n          bathroomTempData = _this$props.bathroomTempData,\n          kitchenTempData = _this$props.kitchenTempData,\n          changeBathroomTemp = _this$props.changeBathroomTemp,\n          changeLivingroomTemp = _this$props.changeLivingroomTemp,\n          changeKitchenTemp = _this$props.changeKitchenTemp,\n          changeBedroomTemp = _this$props.changeBedroomTemp,\n          setLivingroomStatus = _this$props.setLivingroomStatus,\n          setKitchenStatus = _this$props.setKitchenStatus,\n          setBathroomStatus = _this$props.setBathroomStatus,\n          setBedroomStatus = _this$props.setBedroomStatus,\n          setLivingroomTempData = _this$props.setLivingroomTempData,\n          setBedroomTempData = _this$props.setBedroomTempData,\n          setBathroomTempData = _this$props.setBathroomTempData,\n          setKitchenTempData = _this$props.setKitchenTempData; //prefill data\n\n    setLivingroomTempData(makeData(livingroomCurrentTemp, 0.2));\n    setBedroomTempData(makeData(bedroomCurrentTemp, 0.2));\n    setBathroomTempData(makeData(bathroomCurrentTemp, 0.2));\n    setKitchenTempData(makeData(kitchenCurrentTemp, 0.2));\n    console.log(\"checking data...\", livingroomTempData);\n\n    const temp = function () {\n      if (roomName === \"Kitchen\") return {\n        kitchenTemperature,\n        kitchenCurrentTemp\n      };\n      if (roomName === \"Livingroom\") return {\n        livingroomTemperature,\n        livingroomCurrentTemp\n      };\n      if (roomName === \"Bedroom\") return {\n        bedroomTemperature,\n        bedroomCurrentTemp\n      };\n      if (roomName === \"Bathroom\") return {\n        bathroomTemperature,\n        bathroomCurrentTemp\n      };\n    }();\n\n    var tempTarget = temp.tempTarget,\n        currentTemp = temp.currentTemp;\n    console.log('temp', temp); // tempTarget = typeof tempTarget === \"number\"? tempTarget: tempTarget.temperature;\n    // currentTemp = typeof currentTemp === \"number\"? currentTemp: currentTemp.temperature;\n\n    const tempDiff = tempTarget - currentTemp; //set room status: cooling/heating/idle\n\n    const setStatus = setRoomStatus => {\n      if (tempDiff > 0) {\n        setRoomStatus(\"heating\");\n      } else if (tempDiff < 0) {\n        setRoomStatus(\"cooling\");\n      } else {\n        setRoomStatus(\"idle\");\n      }\n\n      ;\n    };\n\n    if (roomName === \"Kitchen\") setStatus(setKitchenStatus);\n    if (roomName === \"Bedroom\") setStatus(setBedroomStatus);\n    if (roomName === \"Livingroom\") setStatus(setLivingroomStatus);\n    if (roomName === \"Bathroom\") setStatus(setBathroomStatus);\n\n    if (kitchenTempData && kitchenTempData.length > 0) {\n      this.showTempInterval = setInterval(() => {\n        if (currentTemp === tempTarget) {\n          if (roomName === \"Kitchen\") {\n            var kitchenData = typeof kitchenTempData.data === \"undefined\" ? kitchenTempData : kitchenTempData.data;\n            console.log(\"kitchenTempData\", kitchenTempData);\n            console.log(\"bathroomTempData\", bathroomTempData);\n            kitchenData.push({\n              date: new Date(),\n              value: d3.randomNormal(currentTemp, 0.2)()\n            });\n            kitchenData.shift();\n            setKitchenTempData(kitchenData);\n          }\n\n          if (roomName === \"Bedroom\") {\n            var bedroomData = typeof bedroomTempData.data === \"undefined\" ? bedroomTempData : bedroomTempData.data;\n            bedroomData.push({\n              date: new Date(),\n              value: d3.randomNormal(currentTemp, 0.2)()\n            });\n            bedroomData.shift();\n            setBedroomTempData(bedroomData);\n          }\n\n          if (roomName === \"Bathroom\") {\n            var bathroomData = typeof bathroomTempData.data === \"undefined\" ? bathroomTempData : bathroomTempData.data;\n            bathroomData.push({\n              date: new Date(),\n              value: d3.randomNormal(currentTemp, 0.2)()\n            });\n            bathroomData.shift();\n            setBathroomTempData(bathroomData);\n          }\n\n          if (roomName === \"Livingroom\") {\n            var livingroomData = typeof livingroomTempData.data === \"undefined\" ? livingroomTempData : livingroomTempData.data;\n            livingroomData.push({\n              date: new Date(),\n              value: d3.randomNormal(currentTemp, 0.2)()\n            });\n            livingroomData.shift();\n            setLivingroomTempData(livingroomData);\n          }\n        }\n      }, 1000);\n      this.changeTempInterval = setInterval(() => {\n        if (currentTemp !== tempTarget) {\n          if (roomName === \"Kitchen\") {\n            currentTemp = Math.round((currentTemp + tempDiff / 10) * 10) / 10;\n            changeKitchenTemp(currentTemp);\n            var kitchenData = kitchenTempData;\n            kitchenData.push({\n              date: new Date(),\n              value: d3.randomNormal(currentTemp, 0.2)()\n            });\n            kitchenData.shift();\n            setKitchenTempData(kitchenData);\n          }\n\n          if (roomName === \"Bedroom\") {\n            currentTemp = Math.round((currentTemp + tempDiff / 10) * 10) / 10;\n            changeBedroomTemp(currentTemp);\n            var bedroomData = bedroomTempData;\n            bedroomData.push({\n              date: new Date(),\n              value: d3.randomNormal(currentTemp, 0.2)()\n            });\n            bedroomData.shift();\n            setBedroomTempData(bedroomData);\n          }\n\n          if (roomName === \"Bathroom\") {\n            currentTemp = Math.round((currentTemp + tempDiff / 10) * 10) / 10;\n            changeBathroomTemp(currentTemp);\n            var bathroomData = bathroomTempData;\n            bathroomData.push({\n              date: new Date(),\n              value: d3.randomNormal(currentTemp, 0.2)()\n            });\n            bathroomData.shift();\n            setBathroomTempData(bathroomData);\n          }\n\n          if (roomName === \"Livingroom\") {\n            currentTemp = Math.round((currentTemp + tempDiff / 10) * 10) / 10;\n            changeLivingroomTemp(currentTemp);\n            var livingroomData = livingroomTempData;\n            livingroomData.push({\n              date: new Date(),\n              value: d3.randomNormal(currentTemp, 0.2)()\n            });\n            livingroomData.shift();\n            setLivingroomTempData(livingroomData);\n          }\n\n          tempTarget = Math.round(tempTarget * 10) / 10;\n\n          if (currentTemp === tempTarget) {\n            clearInterval(this.changeTempInterval);\n          }\n        }\n      }, 1000);\n    }\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.changeTempInterval);\n    clearInterval(this.showTempInterval);\n  }\n\n  render() {\n    const _this$props2 = this.props,\n          roomName = _this$props2.roomName,\n          type = _this$props2.type,\n          kitchenTempData = _this$props2.kitchenTempData,\n          bedroomTempData = _this$props2.bedroomTempData,\n          livingroomTempData = _this$props2.livingroomTempData,\n          bathroomTempData = _this$props2.bathroomTempData;\n\n    var data = function () {\n      if (roomName === \"Kitchen\") return kitchenTempData.data;\n      if (roomName === \"Livingroom\") return livingroomTempData.data;\n      if (roomName === \"Bedroom\") return bedroomTempData.data;\n      if (roomName === \"Bathroom\") return bathroomTempData.data;\n    }();\n\n    var temperature = \"Loading...\";\n\n    if (typeof data !== \"undefined\") {\n      console.log(\"testing...\", data[data.length - 1]);\n      console.log(\"testing...value\", data[data.length - 1].value);\n      const temp = data[data.length - 1].value;\n      temperature = Math.round(temp * 100) / 100;\n    }\n\n    return React.createElement(\"div\", {\n      className: \"room\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }, roomName), React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }, \"Temperature: \", temperature, \"\\xB0F \"), React.createElement(\"h6\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }, \"Status:cooling\"), React.createElement(LineChart, {\n      type: type,\n      width: 600,\n      height: 400,\n      title: 'Current Temperature',\n      data: data,\n      range: [65, 90],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    kitchenTemperature: state.temperature.kitchenTemperature,\n    livingroomTemperature: state.temperature.livingroomTemperature,\n    bedroomTemperature: state.temperature.bedroomTemperature,\n    bathroomTemperature: state.temperature.bathroomTemperature,\n    livingroomCurrentTemp: state.temperature.livingroomCurrentTemp,\n    bedroomCurrentTemp: state.temperature.bedroomCurrentTemp,\n    bathroomCurrentTemp: state.temperature.bathroomCurrentTemp,\n    kitchenCurrentTemp: state.temperature.kitchenCurrentTemp,\n    livingroomStatus: state.temperature.livingroomStatus,\n    bedroomStatus: state.temperature.bedroomStatus,\n    bathroomStatus: state.temperature.bathroomStatus,\n    kitchenStatus: state.temperature.kitchenStatus,\n    livingroomTempData: state.temperature.livingroomTempData,\n    bedroomTempData: state.temperature.bedroomTempData,\n    bathroomTempData: state.temperature.bathroomTempData,\n    kitchenTempData: state.temperature.kitchenTempData\n  };\n};\n\nexport default connect(mapStateToProps, {\n  changeBathroomTemp,\n  changeLivingroomTemp,\n  changeKitchenTemp,\n  changeBedroomTemp,\n  setLivingroomStatus,\n  setKitchenStatus,\n  setBathroomStatus,\n  setBedroomStatus,\n  setLivingroomTempData,\n  setBedroomTempData,\n  setBathroomTempData,\n  setKitchenTempData\n})(Room);","map":{"version":3,"sources":["/Users/langgao/Documents/HiberSense Dashboard/hibersense-dash/src/components/Rooms/Room.js"],"names":["React","Component","LineChart","connect","makeData","d3","changeBathroomTemp","changeLivingroomTemp","changeKitchenTemp","changeBedroomTemp","setLivingroomStatus","setKitchenStatus","setBathroomStatus","setBedroomStatus","setLivingroomTempData","setBedroomTempData","setBathroomTempData","setKitchenTempData","Room","constructor","props","componentDidMount","roomName","kitchenTemperature","livingroomTemperature","bathroomTemperature","bedroomTemperature","kitchenCurrentTemp","bedroomCurrentTemp","bathroomCurrentTemp","livingroomCurrentTemp","livingroomTempData","bedroomTempData","bathroomTempData","kitchenTempData","console","log","temp","tempTarget","currentTemp","tempDiff","setStatus","setRoomStatus","length","showTempInterval","setInterval","kitchenData","data","push","date","Date","value","randomNormal","shift","bedroomData","bathroomData","livingroomData","changeTempInterval","Math","round","clearInterval","componentWillUnmount","render","type","temperature","mapStateToProps","state","livingroomStatus","bedroomStatus","bathroomStatus","kitchenStatus"],"mappings":"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","sourcesContent":["\nimport React, { Component } from 'react'\nimport LineChart from '../LineChart/LineChart';\nimport {connect} from 'react-redux';\nimport {makeData} from '../Utility/DataHandling';\nimport * as d3 from \"d3\";\nimport {\n  changeBathroomTemp,\n  changeLivingroomTemp,\n  changeKitchenTemp,\n  changeBedroomTemp,\n\n  setLivingroomStatus,\n  setKitchenStatus,\n  setBathroomStatus,\n  setBedroomStatus,\n\n  setLivingroomTempData,\n  setBedroomTempData,\n  setBathroomTempData,\n  setKitchenTempData,\n} from '../store/actions/temperatureSettingAction';\n\nclass Room extends Component {\n  constructor(props){\n    super();\n  }\n  \n  componentDidMount(){\n    const {\n      roomName, \n\n      kitchenTemperature,\n      livingroomTemperature,\n      bathroomTemperature,\n      bedroomTemperature,\n\n      kitchenCurrentTemp,\n      bedroomCurrentTemp,\n      bathroomCurrentTemp,\n      livingroomCurrentTemp,\n  \n      livingroomTempData,\n      bedroomTempData,\n      bathroomTempData,\n      kitchenTempData,\n\n      changeBathroomTemp, \n      changeLivingroomTemp,\n      changeKitchenTemp,\n      changeBedroomTemp,\n\n      setLivingroomStatus,\n      setKitchenStatus,\n      setBathroomStatus,\n      setBedroomStatus,\n\n      setLivingroomTempData,\n      setBedroomTempData,\n      setBathroomTempData,\n      setKitchenTempData,\n\n    \n    } = this.props;\n\n    //prefill data\n    setLivingroomTempData(makeData(livingroomCurrentTemp,0.2));\n    setBedroomTempData(makeData(bedroomCurrentTemp,0.2));\n    setBathroomTempData(makeData(bathroomCurrentTemp,0.2));\n    setKitchenTempData(makeData(kitchenCurrentTemp,0.2));\n\n    console.log(\"checking data...\",livingroomTempData)\n\n    const temp =(function(){\n      if(roomName===\"Kitchen\")  return {kitchenTemperature,kitchenCurrentTemp};\n      if(roomName===\"Livingroom\") return {livingroomTemperature,livingroomCurrentTemp};\n      if(roomName===\"Bedroom\") return {bedroomTemperature, bedroomCurrentTemp};\n      if(roomName===\"Bathroom\") return {bathroomTemperature, bathroomCurrentTemp};\n    })();\n\n    var {tempTarget, currentTemp} = temp;\n    console.log('temp',temp);\n    // tempTarget = typeof tempTarget === \"number\"? tempTarget: tempTarget.temperature;\n    // currentTemp = typeof currentTemp === \"number\"? currentTemp: currentTemp.temperature;\n\n    const tempDiff = tempTarget - currentTemp;\n\n    //set room status: cooling/heating/idle\n    const setStatus=setRoomStatus=>{\n      if(tempDiff>0){\n        setRoomStatus(\"heating\");\n      }else if(tempDiff <0){\n        setRoomStatus(\"cooling\");\n      }else{\n        setRoomStatus(\"idle\")\n      };\n    }\n\n    if(roomName===\"Kitchen\") setStatus(setKitchenStatus);\n    if(roomName===\"Bedroom\") setStatus(setBedroomStatus);\n    if(roomName===\"Livingroom\") setStatus(setLivingroomStatus);\n    if(roomName===\"Bathroom\") setStatus(setBathroomStatus);\n\n\n    if(kitchenTempData&&kitchenTempData.length>0){\n\n    this.showTempInterval = setInterval(()=>{\n      if(currentTemp === tempTarget){\n        if(roomName===\"Kitchen\") {\n          var kitchenData = typeof kitchenTempData.data ===\"undefined\"?kitchenTempData:kitchenTempData.data;\n          console.log(\"kitchenTempData\",kitchenTempData);\n          console.log(\"bathroomTempData\",bathroomTempData);\n          kitchenData.push({date:new Date(),value:d3.randomNormal(currentTemp, 0.2)()});\n          kitchenData.shift();\n          setKitchenTempData(kitchenData);\n        }\n        if(roomName===\"Bedroom\") {\n\n          var bedroomData = typeof bedroomTempData.data ===\"undefined\"?bedroomTempData:bedroomTempData.data;\n          bedroomData.push({date:new Date(),value:d3.randomNormal(currentTemp, 0.2)()});\n          bedroomData.shift();\n          setBedroomTempData(bedroomData);\n        }\n        if(roomName===\"Bathroom\") {\n          var bathroomData = typeof bathroomTempData.data ===\"undefined\"?bathroomTempData:bathroomTempData.data;\n          bathroomData.push({date:new Date(),value:d3.randomNormal(currentTemp, 0.2)()});\n          bathroomData.shift();\n          setBathroomTempData(bathroomData);\n        }\n        if(roomName===\"Livingroom\") {\n          var livingroomData = typeof livingroomTempData.data ===\"undefined\"?livingroomTempData:livingroomTempData.data;\n          livingroomData.push({date:new Date(),value:d3.randomNormal(currentTemp, 0.2)()});\n          livingroomData.shift();\n          setLivingroomTempData(livingroomData);\n        }\n      }},1000)\n\n    this.changeTempInterval = setInterval(()=>{\n      if(currentTemp!==tempTarget){\n        if(roomName===\"Kitchen\") {\n          currentTemp=Math.round((currentTemp+tempDiff/10)*10)/10;\n          changeKitchenTemp(currentTemp);\n          var kitchenData = kitchenTempData;\n\n          kitchenData.push({date:new Date(),value:d3.randomNormal(currentTemp, 0.2)()});\n          kitchenData.shift();\n          setKitchenTempData(kitchenData);\n        }\n        if(roomName===\"Bedroom\") {\n          currentTemp=Math.round((currentTemp+tempDiff/10)*10)/10;\n          changeBedroomTemp(currentTemp);\n\n          var bedroomData = bedroomTempData;\n          bedroomData.push({date:new Date(),value:d3.randomNormal(currentTemp, 0.2)()});\n          bedroomData.shift();\n          setBedroomTempData(bedroomData);\n        }\n        if(roomName===\"Bathroom\") {\n          currentTemp=Math.round((currentTemp+tempDiff/10)*10)/10;\n          changeBathroomTemp(currentTemp);\n          var bathroomData = bathroomTempData;\n          bathroomData.push({date:new Date(),value:d3.randomNormal(currentTemp, 0.2)()});\n          bathroomData.shift();\n          setBathroomTempData(bathroomData);\n        }\n        if(roomName===\"Livingroom\") {\n          currentTemp=Math.round((currentTemp+tempDiff/10)*10)/10;\n          changeLivingroomTemp(currentTemp);\n          var livingroomData = livingroomTempData;\n          livingroomData.push({date:new Date(),value:d3.randomNormal(currentTemp, 0.2)()});\n          livingroomData.shift();\n          setLivingroomTempData(livingroomData);\n        }\n  \n        tempTarget = Math.round(tempTarget*10)/10;\n        \n        if(currentTemp === tempTarget){\n          clearInterval(this.changeTempInterval);\n        }\n      }\n    },1000)\n  }\n  }\n\n  componentWillUnmount(){\n    clearInterval(this.changeTempInterval);\n    clearInterval(this.showTempInterval);\n  }\n\n  render() {\n\n    const {\n      roomName,\n      type,\n      kitchenTempData,\n      bedroomTempData,\n      livingroomTempData,\n      bathroomTempData,\n    } =this.props;\n\n\n    var data =(function(){\n      if(roomName===\"Kitchen\") return kitchenTempData.data;\n      if(roomName===\"Livingroom\") return livingroomTempData.data;\n      if(roomName===\"Bedroom\") return bedroomTempData.data;\n      if(roomName===\"Bathroom\")return bathroomTempData.data;\n    })(); \n    var temperature = \"Loading...\";\n    if(typeof data!==\"undefined\"){\n      console.log(\"testing...\",data[data.length-1]);\n      console.log(\"testing...value\",data[data.length-1].value);\n      const temp = data[data.length-1].value\n\n      temperature=Math.round(temp*100)/100;\n    }\n    return (\n      <div className='room'>\n          <h1>{roomName}</h1>\n          <h5>Temperature: {temperature}°F </h5>\n          <h6>Status:cooling</h6>\n\n          <LineChart \n              type={type}\n              width={600} \n              height={400}\n              title={'Current Temperature'}\n              data = {data}\n              range={[65,90]}\n          />\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps=state=>{\n\n  return{\n    kitchenTemperature: state.temperature.kitchenTemperature,\n    livingroomTemperature: state.temperature.livingroomTemperature,\n    bedroomTemperature: state.temperature.bedroomTemperature,\n    bathroomTemperature: state.temperature.bathroomTemperature,\n\n    livingroomCurrentTemp:state.temperature.livingroomCurrentTemp,\n    bedroomCurrentTemp:state.temperature.bedroomCurrentTemp,\n    bathroomCurrentTemp:state.temperature.bathroomCurrentTemp,\n    kitchenCurrentTemp:state.temperature.kitchenCurrentTemp,\n\n    livingroomStatus:state.temperature.livingroomStatus,\n    bedroomStatus:state.temperature.bedroomStatus,\n    bathroomStatus:state.temperature.bathroomStatus,\n    kitchenStatus:state.temperature.kitchenStatus,\n\n    livingroomTempData:state.temperature.livingroomTempData,\n    bedroomTempData:state.temperature.bedroomTempData,\n    bathroomTempData:state.temperature.bathroomTempData,\n    kitchenTempData:state.temperature.kitchenTempData,\n  }\n}\n\nexport default connect(mapStateToProps, {\n  changeBathroomTemp, \n  changeLivingroomTemp,\n  changeKitchenTemp,\n  changeBedroomTemp,\n\n  setLivingroomStatus,\n  setKitchenStatus,\n  setBathroomStatus,\n  setBedroomStatus,\n\n  setLivingroomTempData,\n  setBedroomTempData,\n  setBathroomTempData,\n  setKitchenTempData,\n})(Room);\n"]},"metadata":{},"sourceType":"module"}